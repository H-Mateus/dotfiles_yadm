#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome!

This is the configuration we've been building in the *Emacs From Scratch* series, now written as an Org Mode document.
This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

*NOTE:* If you run into any issues while using this configuration, please [[https://github.com/daviwil/emacs-from-scratch/issues/new][file an issue]] or send me an email at =david at systemcrafters.cc=.

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 140)
  (defvar efs/default-variable-font-size 140)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.
If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Startup Performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

* Systemd daemon

For running a systemd service for a Emacs server I have the following

#+name: emacsclient service
#+begin_src systemd :tangle ~/.config/systemd/user/emacs.service :mkdirp yes

[Unit]
Description=Emacs server daemon
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=sh -c 'emacs --daemon && emacsclient -c --eval "(delete-frame)"'
ExecStop=/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill emacs))"
Restart=on-failure

[Install]
WantedBy=default.target

#+end_src

which is then enabled by
#+begin_src shell :tangle (if (string= "enabled\n" (shell-command-to-string "systemctl --user is-enabled emacs.service")) "no" "setup.sh")

  systemctl --user enable emacs.service

#+end_src

For some reason if a frame isn't opened early in the initialisation process, the
daemon doesn't seem to like opening frames later --- hence the ~&& emacsclient~
part of the =ExecStart= value.

It can now be nice to use this as a 'default app' for opening files. If we add
an appropriate desktop entry, and enable it in the desktop environment.

#+begin_src conf :tangle ~/.local/share/applications/emacs-client.desktop :mkdirp yes

  [Desktop Entry]
  Name=Emacs client
  GenericName=Text Editor
  Comment=A flexible platform for end-user applications
  MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
  Exec=emacsclient -create-frame --alternate-editor="" --no-wait %F
  Icon=emacs
  Type=Application
  Terminal=false
  Categories=TextEditor;Utility;
  StartupWMClass=Emacs
  Keywords=Text;Editor;
  X-KDE-StartupNotify=false

#+end_src

When the daemon is running, I almost always want to do a few particular things
with it, so I may as well eat the load time at startup. We also want to keep
=mu4e= running.

It would be good to start the IRC client (=circe=) too, but that seems to have
issues when started in a non-graphical session.

#+name: daemon initialisation
#+begin_src emacs-lisp
;; (defun greedily-do-daemon-setup ()
;;   (require 'org)
;;   (when (require 'mu4e nil t)
;;     (setq mu4e-confirm-quit t)
;;     (setq +mu4e-lock-greedy t)
;;     (setq +mu4e-lock-relaxed t)
;;     (+mu4e-lock-add-watcher)
;;     (when (+mu4e-lock-available t)
;;       (mu4e~start)))
;;   (when (require 'elfeed nil t)
;;     (run-at-time nil (* 8 60 60) #'elfeed-update)))

;; (when (daemonp)
;;   (add-hook 'emacs-startup-hook #'greedily-do-daemon-setup))
#+end_src

** Prompt to save when killing emacsclient

This function will give a prompt when killing the emacsclient if there are modified buffers.

#+begin_src emacs-lisp

  (defun client-save-kill-emacs(&optional display)
    " This is a function that can bu used to save buffers and
  shutdown the emacs daemon. It should be called using
  emacsclient -e '(client-save-kill-emacs)'.  This function will
  check to see if there are any modified buffers, active clients
  or frame.  If so, an x window will be opened and the user will
  be prompted."

    (let (new-frame modified-buffers active-clients-or-frames)

                                          ; Check if there are modified buffers, active clients or frames.
      (setq modified-buffers (modified-buffers-exist))
      (setq active-clients-or-frames ( or (> (length server-clients) 1)
                                       (> (length (frame-list)) 1)
                                       ))

                                          ; Create a new frame if prompts are needed.
      (when (or modified-buffers active-clients-or-frames)
        (when (not (eq window-system 'x))
          (message "Initializing x windows system.")
          (x-initialize-window-system))
        (when (not display) (setq display (getenv "DISPLAY")))
        (message "Opening frame on display: %s" display)
        (select-frame (make-frame-on-display display '((window-system . x)))))

                                          ; Save the current frame.
      (setq new-frame (selected-frame))


                                          ; When displaying the number of clients and frames:
                                          ; subtract 1 from clients (this client).
                                          ; subtract 2 from frames (the frame just created and the default frame.)
      (when (or (not active-clients-or-frames)
                (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2))))

                                          ; If the user quits during the save dialog then don't exit emacs.
                                          ; Still close the terminal though.
        (let((inhibit-quit t))
                                          ; Save buffers
          (with-local-quit
            (save-some-buffers))

          (if quit-flag
              (setq quit-flag nil)
                                          ; Kill all remaining clients
            (progn
              (dolist (client server-clients)
                (server-delete-client client))
                                          ; Exit emacs
              (kill-emacs)))
          ))

                                          ; If we made a frame then kill it.
      (when (or modified-buffers active-clients-or-frames) (delete-frame new-frame))
      )
    )


  (defun modified-buffers-exist()
    "This function will check to see if there are any buffers
  that have been modified.  It will return true if there are
  and nil otherwise. Buffers that have buffer-offer-save set to
  nil are ignored."
    (let (modified-found)
      (dolist (buffer (buffer-list))
        (when (and (buffer-live-p buffer)
                   (buffer-modified-p buffer)
                   (not (buffer-base-buffer buffer))
                   (or
                    (buffer-file-name buffer)
                    (progn
                      (set-buffer buffer)
                      (and buffer-offer-save (> (buffer-size) 0))))
                   )
          (setq modified-found t)
          )
        )
      modified-found
      )
    )

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.
[[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

Try [[https://github.com/raxod502/straight.el][stright.el]] - note that this demands so adjusting of the config, including removing references to ensure, and where ensure is set to nil replace with :straight nil
A migration guide can be found [[https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/#put-in-place-org-workaround][here.]]
To update with straight.el use =straight-normalize-all=

#+begin_src emacs-lisp :tangle no

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

#+begin_src emacs-lisp

  ;; install stright.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; prevent package.el loading packages prior to their init-file loading
  (setq package-enable-at-startup nil)
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t) ; no need to refactor use-package configuration
  (straight-use-package 'diminish)                  ; to enable :diminish
  (straight-use-package 'bind-key)                  ; to enable :bind

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)

      ;;;;  package.el
      ;;; so package-list-packages includes them
  ;; (require 'package)
  ;; (add-to-list 'package-archives
  ;;              '("melpa" . "https://melpa.org/packages/"))


#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!
It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!
Disabled for use with straight.el

#+begin_src emacs-lisp :tangle no

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!
It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
                                          ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  ;; I prefer a central place for all backup files
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions t)            ; delete excess backup versions silently.
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.
If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  ;;(tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  ;;(setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; set relative line numbers
  (setq display-line-numbers-type 'relative)
  ;; Add rule at 80 characters
  (global-display-fill-column-indicator-mode 1)
  (setq fill-column 80)
  ;; set colour of indicator
  (set-face-attribute 'fill-column-indicator nil :foreground "grey90")

  ;; Set frame transparency
  ;; (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  ;; (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Dashboard

Set a nice bashboard to display on opening emacs.
Docs are [[https://github.com/emacs-dashboard/emacs-dashboard][here]].

#+begin_src emacs-lisp

  (use-package dashboard
    ;;:ensure t
    :config
    (setq dashboard-startup-banner 'logo)
    ;; set items
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (dashboard-setup-startup-hook))

  ;; to get the daemon to show the dashboard
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.
Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Overpass Nerd Font" :height efs/default-variable-font-size :weight 'regular)
  ;; this set viarable-pitch for markdown/org mode
  (add-hook 'text-mode-hook 'variable-pitch-mode)
  ;; set line-spacing
  (setq-default line-spacing 2)

#+end_src

** Short "yes" and "no"

#+begin_src emacs-lisp

  ;; Ask "y" or "n" instead of "yes" or "no". Yes, laziness is great.
  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

** Clean up whitespace

#+begin_src emacs-lisp

  ;; Remove useless whitespace before saving a file
  (setq-default nuke-trailing-whitespace-p t)
  (add-hook 'before-save-hook 'whitespace-cleanup)
  (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))

#+end_src

** Revert file when changed on disk

Saved me many a time. No more having to say “no” on save because the file on disk has changed since I started editing it.

#+begin_src emacs-lisp

  ;; Auto-revert to disk on file change
  (global-auto-revert-mode t)

#+end_src

** File associations

#+begin_src emacs-lisp

  (setq org-file-apps
        '((auto-mode . emacs)
          ("\\.x?html?\\'" . "xdg-open %s")
          ("\\.pdf\\'" . (lambda (file link)
                           (org-pdfview-open link)))
          ("\\.mp4\\'" . "xdg-open %s")
          ("\\.webm\\'" . "xdg-open %s")
          ("\\.mkv\\'" . "xdg-open %s")
          ("\\.pdf.xoj\\'" . "xournal %s")))

#+end_src

*** Open html in Firefox

Get dired to open .html files in browser.
Stolen from [[http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html][here.]]

#+begin_src emacs-lisp

  (defun xah-html-open-link-in-firefox (&optional @fullpath)
    "open url under cursor in Firefox browser.
  Work in Windows, macOS. 2019-11-09 linux not yet.
  Version 2019-11-09"
    (interactive)
    (let ($path)
      (if @fullpath
          (progn (setq $path @fullpath))
        (let (($inputStr
               (if (use-region-p)
                   (buffer-substring-no-properties (region-beginning) (region-end))
                 (let ($p0 $p1 $p2
                           ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\"))
                   (setq $p0 (point))
                   (skip-chars-backward $pathStops)
                   (setq $p1 (point))
                   (goto-char $p0)
                   (skip-chars-forward $pathStops)
                   (setq $p2 (point))
                   (goto-char $p0)
                   (buffer-substring-no-properties $p1 $p2)))))
          (setq $path (replace-regexp-in-string
                       "^file:///" "/"
                       (replace-regexp-in-string
                        ":\\'" "" $inputStr)))))
      (cond
       ((string-equal system-type "darwin")
        (shell-command (format "open -a 'Firefox.app' \"%s\"" $path)))
       ((string-equal system-type "windows-nt")
        ;; "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" 2019-11-09
        (let ((process-connection-type nil))
          (start-process "" nil "powershell" "start-process" "firefox" $path )))
       ((string-equal system-type "gnu/linux")
        (shell-command (format "firefox \"%s\"" $path))))))

#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.
[[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

I like being able to rotate the windows, and this functionality already exists within DOOM under `SPC w r` and `SPC w R`.
Layout rotation is also preferable, so I added this under `SPC w SPC`

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; try and fix odd indenting behavior
  (setq-default default-tab-width 4)
  (setq tab-always-indent 'complete)
  (setq-default indent-tabs-mode nil)
  ;; disable tab-always-indent as it messes with yasnippets
  ;;(setq tab-always-indent nil)

  (use-package general
    :after evil
    :config
    ;; (general-create-definer efs/leader-keys
    ;;   :keymaps '(normal insert visual emacs)
    ;;   :prefix "SPC"
    ;;   :global-prefix "C-SPC")
    (general-create-definer efs/leader-keys
      :keymaps 'override
      :states  '(insert emacs normal hybrid motion visual operator)
      :prefix  "SPC"
      :global-prefix "C-SPC"
      :non-normal-prefix "S-SPC")
    ;; enable recentf
                                          ;(recentf-mode 1)

    ;; Set up main which-y bindings
    (efs/leader-keys
      "SPC"  '(counsel-M-x :which-key "M-x")
      "t"  '(:ignore t :which-key "toggles")
      "to"  '(olivetti-mode :which-key "olivetti")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "tl"  '(toggle-truncate-lines :which-key "Toggle truncate lines")
      "X" '(org-capture :which-key "capture")
      "a"  '(:ignore a :which-key "actions")
      "as"  '(avy-goto-char-2 :which-key "avy goto char2")
      "ac"  '(helm-bibtex :which-key "helm-bibtex")
      "ar" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
      "b"  '(:ignore b :which-key "buffers")
      "bb" '(counsel-switch-buffer :which-key "switch buffer")
      "bc" '(ispell :which-key "ispell")
      "bk" '(kill-current-buffer :which-key "kill buffer")
      "bs" '(save-buffer :which-key "save buffer")
      "bf" '(swiper :which-key "swiper")
      "bu" '(browse-url-of-file :which-key "open html")
      "bw" '(count-words :which-key "word count")
      "."  '(find-file :which-key "find file")
      "s"  '(ivy-yasnippet :which-key "snippets")
      "w"  '(evil-window-map :which-key "windows")
      "h"  '(help-command :which-key "help")
      ;; "TAB"  '(tab-prefix-map :which-key "workspaces")
      "TAB"  '(:ignore TAB :which-key "workspaces")
      "TAB TAB"  '(tab-new :which-key "new tab")
      "TAB o"  '(tab-next :which-key "next tab")
      "TAB O"  '(tab-previous :which-key "previous tab")
      "TAB r"  '(tab-rename :which-key "rename tab")
      "TAB c"  '(tab-close :which-key "close tab")
      "TAB u"  '(tab-undo-close-tab :which-key "undo close tab")
      ","  '(tab-prefix-map :which-key "workspaces")
      "."  '(find-file :which-key "find file")
      "o"  '(:ignore o :which-key "org")
      "oa" '(org-agenda :which-key "org agenda")
      "o'" '(org-edit-special :which-key "edit code")
      "op" '(org-set-property :which-key "org property")
      "oe" '(org-export-dispatch :which-key "org export")
      "on" '(orb-note-actions :which-key "note actions")
      "oo" '(org-open-at-point :which-key "open link")
      "oi"  '(:ignore oi :which-key "insert")
      "oil" '(org-insert-link :which-key "link")
      "oiu" '(insert-url-as-org-link-fancy :which-key "url")
      ;; "oic" '(org-ref-ivy-insert-cite-link :which-key "cite")
      "oit" '(org-set-tags-command :which-key "tags")
      "ot" '(:ignore ot :which-key "org todo")
      "otd" '(org-todo :which-key "switch todo state")
      "ott" '(counsel-org-tag :which-key "tag")
      "os" '(:ignore os :which-key "scheduling")
      "oss" '(org-schedule :which-key "schedule")
      "osd" '(org-deadline :which-key "deadline")
      "ost" '(org-time-stamp :which-key "timestamp")
      "l" '(:ignore t :which-key "lsp")
      "ld" '(xref-find-definitions :which-key "find definitions")
      "lr" '(xref-find-references :which-key "find references")
      "ln" '(lsp-ui-find-next-reference :which-key "find next ref")
      "lp" '(lsp-ui-find-prev-reference :which-key "find prev ref")
      "ls" '(counsel-imenu :which-key "counsel-imenu")
      "le" '(lsp-ui-flycheck-list :which-key "flycheck list")
      "lS" '(lsp-ui-sideline-mode :which-key "sideline mode")
      "lX" '(lsp-execute-code-action :which-key "execute code action")
      "f"  '(:ignore f :which-key "files")
      "fr" '(counsel-recentf :which-key "recent files")
      "fc" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")) :which-key "config.org"))) ; point to config.org

  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) ; binding to get out of insert mode
    ;;(define-key evil-insert-state-map (kbd "kj") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
  ;; :keymaps
  ;; '(tab-bar-map)
  ;; "TAB" '(:ignore TAB :which-key "workspace"))
  ;;   :keymaps
  ;;   '(evil-window-map)
  ;;   "SPC" '(rotate-layout :which-key "rotate-layout")
  ;;   "<left>" '(evil-window-left :which-key "evil-window-left"))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; add evil escape
  (use-package evil-escape)
  (setq evil-escape-mode t)
  (setq-default evil-escape-key-sequence "ii")
  (setq-default evil-escape-delay 0.2)

#+end_src

** Markdown folding

#+begin_src emacs-lisp

  ;; (use-package origami
  ;;   :config
  ;;   (setq origami-show-fold-header t)     ;highlight fold headers
  ;;   (defun my:origami-fold-start-line-p ()
  ;;     (equal (line-number-at-pos
  ;;             (save-excursion
  ;;               (origami-previous-fold
  ;;                (current-buffer) (line-end-position))))
  ;;            (line-number-at-pos (point))))
  ;;   (defun my:origami-settings ()
  ;;     (general-nmap :keymaps 'local
  ;;                   ;; enhance folds toggling
  ;;                   "<tab>" (general-predicate-dispatch nil ;override only on fold start line
  ;;                             (my:origami-fold-start-line-p) #'origami-forward-toggle-node)
  ;;                   "z a" #'origami-forward-toggle-node
  ;;                   "z f" #'my:evil-origami-create-fold-operator
  ;;                   ;; map extra evil-fold keys
  ;;                   "[ z" #'origami-previous-fold
  ;;                   "] z" #'origami-next-fold
  ;;                   "z j" #'origami-forward-fold-same-level
  ;;                   "z k" #'origami-backward-fold-same-level)
  ;;     ;; explicit folds only
  ;;     ;; (setq-local origami-fold-style 'triple-braces)
  ;;     (origami-mode)
  ;;     (origami-close-all-nodes (current-buffer)))
  ;;   :hook (prog-mode . my:origami-settings))
  ;; ;; (add-to-list 'origami-parser-alist `(markdown-mode . ,(origami-markers-parser "```{r " "```")))

#+end_src

** Evil surround

Surround visual selection with =S= or =gS=
#+begin_src emacs-lisp

  (use-package evil-surround
    ;;:ensure t
    :config
    (global-evil-surround-mode 1))

#+end_src
** Rebind C-u

Since I let =evil-mode= take over =C-u= for buffer scrolling, I need to re-bind the =universal-argument= command to another key sequence.
I'm choosing =C-M-u= for this purpose.

#+begin_src emacs-lisp
(global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src* UI Configuration

** Nice Parentheses

#+begin_src emacs-lisp

  ;;(electric-pair-mode 1) ; auto-insert matching bracket
  (show-paren-mode 1)    ; turn on paren match highlighting

#+end_src

*** smartparens

Insert matching parentheses and jump across them

#+begin_src emacs-lisp

  (use-package smartparens
    :diminish smartparens-mode
    :config
    (add-hook 'ess-mode-hook #'smartparens-mode)
    (add-hook 'inferior-ess-mode-hook #'smartparens-mode))
    ;;(add-hook 'ess-mode-hook #'turn-on-smartparens-strict-mode))

#+end_src

*** evil-smartparens

#+begin_src emacs-lisp

  (use-package evil-smartparens
    :after evil
    :hook ((prog-mode markdown-mode org-mode) . evil-smartparens-mode))

#+end_src

** Avy

[[https://github.com/abo-abo/avy][Avy]] is a great little package for quickly moving around buffers

#+begin_src emacs-lisp

  (use-package avy)

#+end_src

** Workspaces with eyebrowse

I liked the workspaces from doom emacs, let try and replicate with [[https://depp.brause.cc/eyebrowse/][eyebrowse]]
Current package is [[https://github.com/nex3/perspective-el][perspective]]

#+begin_src emacs-lisp

  (use-package perspective
    :demand t
    :bind (("C-M-j" . persp-counsel-switch-buffer)
           ("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))

#+end_src

** Contextual leader key

A useful gist can be found [[https://gist.github.com/progfolio/1c96a67fcec7584b31507ef664de36cc#contextual-mode-specific-leader-key][here]]
This creates a mode specific leader key.
We define a global-leader definer to access major-mode specific bindings:

#+begin_src emacs-lisp

  (general-create-definer global-leader
    :keymaps 'override
    :states '(emacs normal hybrid motion visual operator)
    :prefix "SPC m"
    "" '(:ignore t :which-key (lambda (arg) `(,(cadr (split-string (car arg) " ")) . ,(replace-regexp-in-string "-mode$" "" (symbol-name major-mode))))))

#+end_src

For example, with the following, we can =eval-buffer= when in =emacs-lisp-mode= or =lisp-interaction-mode=
by pressing =SPC m e b=:
Currently disabled as straight.el seems to have caused emacs to try and install elisp-mode

#+begin_src emacs-lisp

  (use-package elisp-mode
    ;;this is a built in package, so we don't want to try and install it
    ;;:ensure nil
    :straight nil
    :general
    (global-leader
      ;;specify the major modes these should apply to:
      :major-modes
      '(emacs-lisp-mode lisp-interaction-mode t)
      ;;and the keymaps:
      :keymaps
      '(emacs-lisp-mode-map lisp-interaction-mode-map)
      "e" '(:ignore t :which-key "eval")
      "eb" 'eval-buffer
      "ed" 'eval-defun
      "ee" 'eval-expression
      "ep" 'pp-eval-last-sexp
      "es" 'eval-last-sexp
      "i" 'elisp-index-search))

#+end_src

** Multi-cursor

This [[https://github.com/hlissner/evil-multiedit/tree/9f271e0e6048297692f80ed6c5ae8994ac523abc][plugin]] was an answer to the lack of proper multiple cursor support in Emacs+evil.
It allows you to select and edit matches interactively, integrating iedit-mode into evil-mode with an attempt at sensible defaults.

#+begin_src emacs-lisp
  (use-package evil-multiedit)

  ;; Highlights all matches of the selection in the buffer.
  (define-key evil-visual-state-map "R" 'evil-multiedit-match-all)

  ;; Match the word under cursor (i.e. make it an edit region). Consecutive presses will
  ;; incrementally add the next unmatched match.
  (define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Match selected region.
  (define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
  ;; Insert marker at point
  (define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)

  ;; Same as M-d but in reverse.
  (define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
  (define-key evil-visual-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)

  ;; OPTIONAL: If you prefer to grab symbols rather than words, use
  ;; `evil-multiedit-match-symbol-and-next` (or prev).

  ;; Restore the last group of multiedit regions.
  (define-key evil-visual-state-map (kbd "C-M-D") 'evil-multiedit-restore)

  ;; RET will toggle the region under the cursor
  (define-key evil-multiedit-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)
  ;; ...and in visual mode, RET will disable all fields outside the selected region
  (define-key evil-motion-state-map (kbd "RET") 'evil-multiedit-toggle-or-restrict-region)

  ;; For moving between edit regions
  (define-key evil-multiedit-state-map (kbd "C-n") 'evil-multiedit-next)
  (define-key evil-multiedit-state-map (kbd "C-p") 'evil-multiedit-prev)
  (define-key evil-multiedit-insert-state-map (kbd "C-n") 'evil-multiedit-next)
  (define-key evil-multiedit-insert-state-map (kbd "C-p") 'evil-multiedit-prev)

  ;; Ex command that allows you to invoke evil-multiedit with a regular expression, e.g.
  (evil-ex-define-cmd "ie[dit]" 'evil-multiedit-ex-match)
#+end_src

** Windows Behaviour

The following code allows me to choose which buffer I want to see when I split a window.
It first does a split to the right, and then opens Ivy and then shows me a preview.
Not working

#+begin_src emacs-lisp

  ;; (setq evil-vsplit-window-right t
  ;;       evil-split-window-below t)
  ;; (defadvice! prompt-for-buffer (&rest _)
  ;;   :after '(evil-window-split evil-window-vsplit)
  ;;   (+ivy/switch-buffer))
  ;; (setq +ivy-buffer-preview t)

#+end_src

** make-capture-frame

#+begin_src emacs-lisp

  (defun make-capture-frame ()
    "Create a new frame and org-capture."
    (interactive)
    ;; (require 'cl-lib)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
      (condition-case err
          (org-capture nil "x")
        (user-error (when (string= (cadr err) "Abort")
                      (delete-frame))))))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advice capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

#+end_src

** Get labels in current buffer
from [[https://kitchingroup.cheme.cmu.edu/blog/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links/][JKitchin’s blog]]

#+begin_src emacs-lisp

  (defun get-labels ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((matches '()))
        (while (re-search-forward "label:\\([a-zA-z0-9:-]*\\)" (point-max) t)
          (add-to-list 'matches (match-string-no-properties 1) t))
        matches)))

#+end_src

* UI Configuration

** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.
Great for live streams and screencasts!

#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.
Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.
You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-acario-dark t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.
The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup))

  ;; add time
  (setq display-time-format "%l:%M %p %b %y"
        display-time-default-load-average nil)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Scrolling

=Scroll-margin= lets you set a line offset when scrolling.
So a scroll-margin of 5 will mean the buffer will start scrolling when you are 5 lines from the top or bottom, as opposed the final line

#+begin_src emacs-lisp

  (setq scroll-margin 7)
  (setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
  (setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.
For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.
This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :init
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot 0
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.2
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " → " ))
  (which-key-mode)

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.
It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.
Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    ;;:diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; (use-package ivy-rich
  ;;   :after ivy
  ;;   :init
    ;; (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.
This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (straight-use-package 'company-prescient)
  (company-prescient-mode)

#+end_src

** M-x changes

The following line removes the annoying '^' in things like counsel-M-x and other ivy/counsel prompts.
The default '^' string means that if you type something immediately after this string only completion candidates that begin with what you typed are shown.
Most of the time, I’m searching for a command without knowing what it begins with though.

#+begin_src emacs-lisp

  (setq ivy-initial-inputs-alist nil)

#+end_src

Smex is a package the makes M-x remember our history.  Now M-x will show our last used commands first.

#+begin_src emacs-lisp

  (use-package smex)
  (smex-initialize)

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.
For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Demos

Insert demos after describe function with [[https://github.com/xuchunyang/elisp-demos][elisp-demos]]

#+begin_src emacs-lisp

  (use-package elisp-demos
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))

#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.
We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.
You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (efs/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Displaying World Time

=display-time-world= command provides a nice display of the time at a specified list of timezones.
Nice for working in a team with remote members.

#+begin_src emacs-lisp

  (setq display-time-world-list
    '(("America/Los_Angeles" "Seattle")
      ("America/New_York" "New York")
      ("Europe/Athens" "Athens")
      ("Europe/London" "London")
      ("Pacific/Auckland" "Auckland")
      ("Asia/Shanghai" "Shanghai")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

** Folding with Origami.el

[[https://github.com/gregsexton/origami.el][Origami.el]] is a package for folding text.

#+begin_src emacs-lisp

  (use-package origami
    :hook (yaml-mode . origami-mode))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.
It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.
We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Overpass Nerd Font" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.
There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (diminish org-indent-mode))

    ;; use enter to follow link - not working?
    (setq org-return-follows-link t)

  (use-package org
    ;;:pin org ; planned feature in stright.el?
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-startup-folded 'content)
    ;; add time stamp when completeing todo
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    ;; have a. A. a) A) list bullets
    (setq org-list-allow-alphabetical t)
    ;; try not to accidently do weird stuff in invisible regions
    (setq org-catch-invisible-edits 'smart)
    (setq org-ctrl-k-protect-subtree t)
    (setq org-display-remote-inline-images 'cache
          org-startup-with-inline-images t)

    (setq org-agenda-files
          '("~/Documents/org/tasks.org"
            "~/Documents/org/habits.org"
            "~/Documents/org/birthdays.org"))

    ;; set default org-babel header-args
    (setq org-babel-default-header-args
          (cons '(:exports . "both")
                (assq-delete-all :exports org-babel-default-header-args))
          org-babel-default-header-args
          (cons '(:results . "output verbatim replace")
                (assq-delete-all :results org-babel-default-header-args)))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
            ;; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))
            ;; filter to tag work, but not tag email
            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Documents/org/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("ts" "Clocked Entry Subtask" entry (clock)
             "* TODO %\n %U\n %a\n %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Documents/org/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Documents/org/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Documents/org/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("h" "Hugo")
            ("hp" "Blog Post" entry (file+olp "~/git_work/personal_website/org-content/blog.org" "Posts")
             (function  org-hugo-new-subtree-post-capture-template))

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Documents/org/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    ;; this is an example of how to bind staight to a capture template
    ;; (define-key global-map (kbd "C-c j")
    ;; (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))

#+end_src

*** Clocking/logging

#+begin_src emacs-lisp

  (setq org-check-running-clock t
        org-log-note-clock-out t
        org-log-done 'time
        org-log-into-drawer t
        ;; org-clock-auto-clockout-timer (* 10 60)
        )

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.
Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
    ;;:custom
    ;;(org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Function to insert org link from clipboard

Found this little trick [[https://emacs.stackexchange.com/questions/3280/orgmode-insert-link-from-clipboard][here]].

#+begin_src emacs-lisp

  (defun insert-url-as-org-link-fancy ()
    "If there's a URL on the clipboard, insert it as an org-mode
  link in the form of [[url][*]], and leave point at *."
    (interactive)
    (let ((link (substring-no-properties (x-get-selection 'CLIPBOARD)))
          (url  "\\(http[s]?://\\|www\\.\\)"))
      (save-match-data
        (if (string-match url link)
            (progn
              (insert (concat "[[" link "][]]"))
              (backward-char 2))
          (error "No URL on the clipboard")))))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.
[[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (R .t)
       (sql .t)
       (shell .t)
       ;;(sh . t)
       (latex .t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))
  ;; stop babel asking for confirmation on running block
  (setq org-confirm-babel-evaluate nil)

#+end_src

** Exporting

#+begin_src emacs-lisp

  (require 'ob-org)

  ;; org-export ignore headlines with :ignore: tag
  ;; (require 'ox-extra)
  ;; (ox-extras-activate '(latex-header-blocks ignore-headlines))

  (require 'ox-latex)

  ;; basic latex setting
  (setq org-highlight-latex-and-related '(native script entities))
  (setq org-preview-latex-default-program 'imagemagick)
  ;; (setq org-latex-default-figure-position 'htbp)
  (setq org-latex-pdf-process
        (list "latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode -output-directory %o' -f -pdf %f"))
  (setq org-latex-prefer-user-labels t)
  (customize-set-value 'org-latex-hyperref-template "
        \\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},
         pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true}\n")

  ;; async code eval
  (use-package ob-async)

  (use-package org-pdfview
    :after org pdf-tools)

#+end_src

** Deft

Set up [[https://github.com/jrblevin/deft/tree/c4af44827f4257e7619e63abfd22094a29a9ab52][Deft]]
#+begin_src emacs-lisp

  (use-package deft
    :commands deft
    :init
    (setq deft-default-extension "org"
          ;; de-couples filename and note title:
          deft-use-filename-as-title nil
          deft-use-filter-string-for-filename t
          ;; disable auto-save
          deft-auto-save-interval -1.0
          ;; converts the filter string into a readable file-name using kebab-case:
          deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . downcase)))
    :config
    (add-to-list 'deft-extensions "tex"))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.
For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("r" . "src R")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Presentations

Here we use [[https://github.com/yjwen/org-reveal/][org-reveal]]
#+begin_src emacs-lisp

  (use-package ox-reveal)
  (setq org-reveal-root "file:///home/mateus/git_work/presentations/reveal-root")

#+end_src

* Writting

** Spell check

*** Hunspell
#+begin_src shell :tangle (if (file-exists-p "/usr/share/myspell/en-custom.dic") "no" "setup.sh")
cd /tmp
curl -o "hunspell-en-custom.zip" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=hunspell'
unzip "hunspell-en-custom.zip"

sudo chown root:root en-custom.*
sudo mv en-custom.{aff,dic} /usr/share/myspell/
#+end_src

*** Aspell
#+begin_src shell :tangle (if (file-expand-wildcards "/usr/lib64/aspell*/en-custom.multi") "no" "setup.sh")
cd /tmp
curl -o "aspell6-en-custom.tar.bz2" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=aspell'
tar -xjf "aspell6-en-custom.tar.bz2"

cd aspell6-en-custom
./configure && make && sudo make install
#+end_src

**** Configuration

#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-dictionary "en-custom"))
#+end_src
Oh, and by the way, if ~company-ispell-dictionary~ is ~nil~, then
~ispell-complete-word-dict~ is used instead, which once again when ~nil~ is
~ispell-alternate-dictionary~, which at the moment maps to a plaintext version of
the above.

It seems reasonable to want to keep an eye on my personal dict, let's have it
nearby (also means that if I change the 'main' dictionary I keep my addition).
#+begin_src emacs-lisp
(setq ispell-personal-dictionary (expand-file-name ".ispell_personal" user-emacs-directory))
#+end_src

*** Flyspell

#+begin_src emacs-lisp

  (use-package flyspell
    :hook ((text-mode-hook . flyspell-mode)
           (prog-mode-hook . flyspell-prog-mode))
    :config
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
    (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
    (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_example " . "#\\+end_example$"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE " . "#\\+END_EXAMPLE$")))

#+end_src

** Olivetti

Add a nice writing minor mode with [[https://github.com/rnkn/olivetti][Olivetti.]]
It mainly add some nice margins either side to make reader and writing more pleasant

#+begin_src emacs-lisp

  (use-package olivetti)
  ;; Set the body text width
  (setq olivetti-body-width 140)
  ;; Enable Olivetti for text-related mode such as Org Mode
  ;; (add-hook 'text-mode-hook 'olivetti-mode)

#+end_src

** Yasnippet

Good video guide to using [[https://github.com/joaotavora/yasnippet][yasnippet]] can be found [[https://www.youtube.com/watch?v=xmBovJvQ3KU][here]].
Note that yasnippet doesn't include any snippets to start with, but there are several collection on MELPA.
Here we start with [[http://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]].
The docs can be found [[https://joaotavora.github.io/yasnippet/][here]].

#+begin_src emacs-lisp

  (use-package yasnippet
    :init
    (yas-global-mode 1)
    ;;:diminish yas-mode
    :config
    (require 'warnings)
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"                 ;; personal snippets
            ;; "/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
            ;; "/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
            ))
    ;;(setq yas-snippet-dirs-custom (format "%s/%s" user-emacs-directory "snippets/"))
    ;; (setq yas-snippet-dirs-custom (expand-file-name "/snippets" user-emacs-directory))
    ;; (add-to-list' yas-snippet-dirs 'yas-snippet-dirs-custom)
    (setq yas-indent-line t)
    ;; install some snippets
    (use-package yasnippet-snippets)
    (yas-reload-all))

  ;; ivy support
  (use-package ivy-yasnippet)
  ;; this doesn't seem to work - yasnippets in general not working well in R
  (use-package r-autoyas
    :hook (ess-mode-hook . r-autoyas-ess-active))
  ;; (require 'r-autoyas)
  ;; (add-hook 'ess-mode-hook 'r-autoyas-ess-activate)

#+end_src

* References

Here we set up how to insert citation, and how to take notes for our citations with org-roam and org-noter.
The setup is heavily based on [[https://github.com/sunnyhasija/Academic-Doom-Emacs-Config][sunnyhasijas config]].

** Org-ref

Set up [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref]]

#+begin_src emacs-lisp
  (use-package org-ref
    :after org
    :init
    (setq bibtex-completion-bibliography '("~/Documents/masterLib.bib")
          ;; "~/Dropbox/emacs/bibliography/dei.bib"
          ;; "~/Dropbox/emacs/bibliography/master.bib"
          ;; "~/Dropbox/emacs/bibliography/archive.bib")
          bibtex-completion-library-path '("~/Zotero/")
          bibtex-completion-notes-path "~/Documents/org-roam/"
          bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))

  (require 'org-ref-helm)

#+end_src

#+begin_src emacs-lisp :tangle no

  (use-package org-ref
    :after org
    :init
    (setq ;org-ref-completion-library 'org-ref-ivy-cite
     ;; org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
     ;; reftex-default-bibliography '("~/Documents/masterLib.bib")
     ;; org-ref-bibliography-notes '("~/Documents/org-roam/notes.org")
     ;; org-ref-default-bibliography '("~/Documents/masterLib.bib")
     bibtex-completion-bibliography '("~/Documents/masterLib.bib")
     ;; org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
     bibtex-completion-notes-path "~/Documents/org-roam/"
     ;; org-ref-notes-function 'orb-edit-notes
     ;; org-ref-pdf-directory '("~/Zotero/"))
     bibtex-completion-library-path '("~/Zotero/"))
    ;; bibtex-completion-pdf-open-function 'org-open-file)
    ;; :bind
    ;; (:map org-mode-map ("SPC o i c" . org-ref-ivy-insert-cite-link))
    :config)
  ;; (require 'org-ref)
  ;; (require 'doi-utils)
  ;; (require 'org-id)
  ;; (require 'org-ref-wos)
  ;; (require 'org-ref-scopus)
  ;; (require 'org-ref-pubmed)
  ;; (require 'org-ref-sci-id)
  ;; (setq bibtex-autokey-year-length 4
  ;;       bibtex-autokey-name-year-separator ""
  ;;       bibtex-autokey-year-title-separator "-"
  ;;       bibtex-autokey-titleword-separator "-"
  ;;       bibtex-autokey-titlewords 0
  ;;       bibtex-autokey-titlewords-stretch 1
  ;;       bibtex-autokey-titleword-length 5))

#+end_src

** Helm-Bibtex

We need to install helm as well

#+begin_src emacs-lisp :tangle yes

  (use-package helm)
  (use-package helm-bibtex
    :after org)

  ;; (use-package ivy-bibtex
  ;;   :after org)

  ;; (setq bibtex-format-citation-functions
  ;;       '((org-mode . (lambda (x) (insert (concat
  ;;                                          "\\cite{"
  ;;                                          (mapconcat 'identity x ",")
  ;;                                          "}")) ""))))

  ;; ;; (setq
  ;;  bibtex-completion-pdf-field "file"
  ;;  bibtex-completion-bibliography
  ;;  '("~/Documents/masterLib.bib")
  ;;  bibtex-completion-library-path '("~/Zotero/"))
  ;;                                         ; bibtex-completion-notes-path "~/Documents/Org/references/articles.org"  ;; not needed anymore as I take notes in org-roam

#+end_src

** Zotxt

Allows for syncing of the notes between zotero and emacs.
*** Note: This package only seems to load initial notes into emacs - Probably not needed anymore.

#+begin_src emacs-lisp :tangle no

  (use-package zotxt
    :after org)
  ;;(add-to-list 'load-path (expand-file-name "ox-pandoc" starter-kit-dir))

#+end_src

*** Open zotero pdf at point

Taken from the [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org#a-note-for-mendeley-jabref-and-zotero-users][manual]]

#+begin_src emacs-lisp :tangle no

  (setq bibtex-completion-pdf-field "file")

  (defun efs/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (car (bibtex-completion-find-pdf-in-field key))))
      (if (file-exists-p pdf-file)
          (org-open-file pdf-file)
        (message "No PDF found for %s" key))))

  (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
  ;; (setq org-ref-get-pdf-filename-function 'bibtex-completion-find-pdf-in-field)

  (global-set-key (kbd "<f8>") 'my/org-ref-open-pdf-at-point)

#+end_src

** Org-roam-bibtex

#+begin_src emacs-lisp :tangle no

  (use-package org-roam-bibtex
    :after org-roam
    :load-path "~/projects/org-roam-bibtex/" ; Modify with your own path where you cloned the repository
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions)))
    :config
    (require 'org-ref)) ; optional: if Org Ref is not loaded anywhere else, load it here

  (setq orb-preformat-keywords   '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))

#+end_src

#+begin_src emacs-lisp :tangle no

  (use-package org-roam-bibtex
    :load-path "~/Documents/masterLib.bib" ;Modify with your own path
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :bind (:map org-mode-map
                (("C-c n a" . orb-note-actions))))

  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point) ""
           :file-name "${citekey}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n" ; <--
           :unnarrowed t)))
  (setq orb-preformat-keywords   '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))

  (setq orb-templates
        '(("n" "ref+noter" plain (function org-roam-capture--get-point)
           ""
           :file-name "${slug}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS:

  - tags ::
  - keywords :: ${keywords}
  \* ${title}
  :PROPERTIES:
  :Custom_ID: ${citekey}
  :URL: ${url}
  :AUTHOR: ${author-or-editor}
  :NOTER_DOCUMENT: %(orb-process-file-field \"${citekey}\")
  :NOTER_PAGE:
  :END:")))

#+end_src
* Note-taking

** Set note directories

#+begin_src emacs-lisp

  (setq
   org_notes (concat (getenv "HOME") "/Documents/org-roam/")
   zot_bib (concat (getenv "HOME") "/Documents/masterLib.bib")
   org-directory org_notes
   org-roam-dailies-directory (concat org_notes "daily")
   deft-directory org_notes
   org-roam-directory org_notes
   org-roam-db-location (concat org_notes "org-roam.db"))

#+end_src

** PDF-tools

#+begin_src emacs-lisp

  (use-package pdf-tools
    ;; :commands (pdf-view-mode pdf-tools-install)
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :load-path "~/.emacs.d/straight/build/pdf-tools"
    :init
    (pdf-tools-install)
    :config
    ;; (pdf-loader-install)
    ;; (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    ;; (define-pdf-cache-function pagelabels)
    ;; :hook ((pdf-view-mode-hook . (lambda () (display-line-numbers-mode -1)))
           ;; (pdf-view-mode-hook . pdf-tools-enable-minor-modes))
    :bind
    ;; swiper doesn't play nice with pdf-tools, so I disable it.
    (:map pdf-view-mode-map ("C-s" . isearch-forward)))

  ;; (use-package org-pdftools
  ;;   :defer t
  ;;   :hook (org-load-hook . org-pdftools-setup-link))

#+end_src

** Org-noter

Set up [[https://github.com/weirdNox/org-noter][org-noter]]

#+begin_src emacs-lisp :tangle no

  (use-package org-noter
    :after (:any org pdf-view)
    :bind ((:map org-mode-map ("C-c o" . org-noter))
           (:map org-noter-notes-mode-map
                 ("C-c k" . org-noter-create-skeleton)
                 ("C-c q" . org-noter-kill-session)))
    :config
    (setq
     ;; org-noter-notes-window-location 'horizontal-split
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     org-noter-notes-search-path (list org_notes)))

#+end_src

** org-noter-insert-precice-note-dwim

Taken from [[https://github.com/zaeph/.emacs.d/blob/master/init.el#L4420][zaeph]]

#+begin_src emacs-lisp :tangle no

  (defun efs/org-noter-insert-precise-note-dwim (force-mouse)
    "Insert note associated with a specific location.
  If in nov-mode, use point rather than the mouse to target the
  position."
    (interactive "P")
    (if (and (derived-mode-p 'nov-mode)
             (not force-mouse))
        (let ((pos (if (region-active-p)
                       (min (region-beginning) (point))
                     (point))))
          (org-noter-insert-note pos))
      (org-noter-insert-precise-note)))

#+end_src

** Org-roam

Documentation can be found [[https://www.orgroam.com/][here]]
Repo [[https://github.com/org-roam/org-roam][here]]

#+begin_src emacs-lisp

  (setq org-roam-v2-ack t) ; stop org-roam v2 warning
  (use-package org-roam
    :straight (:host github :repo "org-roam/org-roam"
                     :files (:defaults "extensions/*"))
    :hook (after-init-hook . org-roam-db-autosync-mode)
    :commands (org-roam-buffer-toggle-display
               org-roam-find-file
               org-roam-graph
               org-roam-insert
               org-roam-switch-to-buffer
               org-roam-dailies-date
               org-roam-dailies-today
               org-roam-dailies-tomorrow
               org-roam-dailies-yesterday)
    :config
    (require 'org-roam-capture)
    (setq org-roam-verbose nil  ; https://youtu.be/fn4jIlFwuLU
          org-roam-buffer-no-delete-other-windows t ; make org-roam buffer sticky
          org-roam-capture-templates '(("d" "default" plain #'org-roam-capture--get-point "%?"
                                        :file-name "%<%Y%m%d%H%M%S>-${slug}"
                                        :head "#+title: ${title}\n#+created: %U\n#+last_modified:\n#+roam_tags:\n\n"
                                        :unnarrowed t)
                                       ("r" "bibliography reference" plain "%?"
                                        :target
                                        (file+head "references/${citekey}.org" "#+title: ${title}\n")
                                        :unnarrowed t))
          org-roam-dailies-capture-templates
          '(("d" "default" entry #'org-roam-capture--get-point
             "* %?"
             :add-created t
             :file-name "daily/%<%Y-%m-%d>"
             :head "#+title: %<%Y-%m-%d>\n#+created: %u\n#+last_modified: %U\n#+roam_tags: dailies\n\n"))))

  ;;setupeybindings
  (efs/leader-keys
    "n"  '(:ignore t :which-key "notes")
    "nl" '(org-roam :which-key "org-roam")
    "nf" '(org-roam-node-find :which-key "find")
    "ni" '(org-roam-node-insert :which-key "insert")
    ;; "nc" '(org-roam-capture :which-key "capture")
    "nw" '(org-roam-switch-to-buffer :which-key "switch roam buffer")
    "nb" '(org-roam-buffer-toggle :which-key "toggle display")
    "nd" '(org-roam-dailies-capture-today :which-key "daily capture")
    "ng" '(org-roam-ui-mode :which-key "show graph")
    "n[" '(org-roam-dailies-find-date :which-key "previous daily")
    "n]" '(org-roam-dailies-find-today :which-key "next daily")
    "nt" '(org-roam-tag-add :which-key "tag")
    "ns" '(deft :which-key "deft"))

#+end_src

** Org-roam-UI

Allows me to see my org-roam-graph. This is a [[https://github.com/org-roam/org-roam-ui][fantastic package]] and I have my roam-server almost always open as I take notes.
Used to be org-roam-server, now that ones for org-roam version 1.

#+begin_src emacs-lisp

  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

** Org-Roam-Server

Allows me to see my org-roam-graph. This is a fantastic package and I have my roam -server almost always open as I take notes.

#+begin_src emacs-lisp

  ;; (use-package org-roam-server
  ;;               :after org-roam
  ;;               :config
  ;;               (setq org-roam-server-host "127.0.0.1"
  ;;                     org-roam-server-port 8078
  ;;                     org-roam-server-export-inline-images t
  ;;                     org-roam-server-authenticate nil
  ;;                     org-roam-server-network-poll t
  ;;                     org-roam-server-label-truncate t
  ;;                     org-roam-server-label-truncate-length 60
  ;;                     org-roam-server-label-wrap-length 20)
  ;;               (defun org-roam-server-open ()
  ;;                 "Ensure the server is active, then open the roam graph."
  ;;                 (interactive)
  ;;                 (org-roam-server-mode 1)
  ;;                 (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))))
  ;; (use-package org-roam-server
  ;;   :ensure t
  ;;   :config
  ;;   (setq org-roam-server-host "127.0.0.1"
  ;;         org-roam-server-port 8078
  ;;         org-roam-server-authenticate nil
  ;;         org-roam-server-export-inline-images t
  ;;         org-roam-server-serve-files nil
  ;;         org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
  ;;         org-roam-server-network-poll t
  ;;         org-roam-server-network-arrows nil
  ;;         org-roam-server-network-label-truncate t
  ;;         org-roam-server-network-label-truncate-length 60
  ;;         org-roam-server-network-label-wrap-length 20))

  ;; (unless (server-running-p)
  ;;   (org-roam-server-mode))
#+end_src

* Blogging

** Ox-Hugo

I have recently started using [[https://ox-hugo.scripter.co/][ox-hugo]] to help post on my Hugo based website.
The following section sets up a function for the previously defined org-capture to enable quick blogging.

#+begin_src emacs-lisp

  ;; install ox-hugo
  (use-package ox-hugo)

  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
        See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format  :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ,(concat ":EXPORT_HUGO_CUSTOM_FRONT_MATTER: "  ":tags something :subtitle booyea :featured false :categories abc :highlight true ")
                   ":END:"
                   "%?\n")          ;Place the cursor here
                 "\n")))
  (defvar hugo-org-path "~/git_work/personal_website/org-content/"
    "define the place where we put our org files for hugo")
  ;;(defvar org-capture-blog (concat hugo-org-path "blog.org"))

#+end_src

* Development

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.
We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/company-mode/company-quickhelp][company-quickhelp]] for documentation with completion - TODO company-box and quickhelp aren't working correctly with docstrings...

#+begin_src emacs-lisp

  (use-package company
    :diminish company-mode
    :init
    (require 'company-dabbrev)
    (require 'company-dabbrev-code)
    :hook ((lsp-mode ess-r-mode inferior-ess-r-mode) . company-mode)
    :config
    (global-company-mode)
    (setq company-minimum-prefix-length 1)
    (setq company-show-numbers t)
    (setq company-idle-delay 0.3)
    (setq company-echo-delay 0.3)
    (setq company-begin-commands '(self-insert-command))
    (setq company-dabbrev-downcase 0)
    (setq company-dabbrev-code-everywhere t)
    (setq company-dabbrev-code-ignore-case nil)
    (setq company-dabbrev-ignore-case nil)
    (setq company-selection-wrap-around t
          company-tooltip-align-annotations t) ; here
    (setq-local company-backends
                (append '((
                           ;; company-dabbrev-code
                           ;; company-R-args
                           company-R-objects
                           company-irony))
                        company-backends))
    (add-to-list 'company-backends 'company-c-headers)
    ;; (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
  ;; (add-to-list 'company-dabbrev-code-modes 'ess-mode)
  :bind (:map company-active-map
  ;; ([tab] . company-complete-selection)
  ("RET" . company-complete-selection)))
  ;; ("C-n" . company-select-next)
  ;; ("C-p" . company-select-previous)))

  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode)
  ;;   :config
  ;;   (setq company-box-delay 0.1)
    ;; (setq company-box-doc-delay 0.1))

  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode)
    :config
    (setq company-quickhelp-delay 0.4))

  (straight-use-package 'company-lsp)
  (use-package company-lsp
    :requires company
    :config
    (push 'company-lsp company-backends)
    ;; Disable client-side cache because the LSP server does a better job.
    (setq company-transformers nil
          company-lsp-async t
          company-lsp-cache-candidates nil))

  ;; lsp-mode for bash
  (straight-use-package 'lsp-mode)
  (use-package lsp-mode
    :commands lsp
    :hook
    (sh-mode . lsp)
    (c++-mode . lsp))
  ;;(add-hook 'evil-normal-state-entry-hook #'company-abort) ;; make aborting less annoying.

#+end_src

** Languages

*** ESS for R

We use [[https://ess.r-project.org][ESS]] to enable R support in emacs
Current ess setting stolen from [[https://github.com/chuvanan/dot-files/blob/master/emacs-init.el][here]].

**** R functions

Define some functions for inserting various operators and exporting .Rmd

#+begin_src emacs-lisp

  ;; fundtions for inserting useful R symbols
  (defun efs/insert-r-pipe ()
    "Insert the pipe operator in R, %>%"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))

  (defun efs/insert-r-in ()
    "Insert the pipe operator in R, %>%"
    (interactive)
    (just-one-space 1)
    (insert "%in%")
    (reindent-then-newline-and-indent))
  ;; <<- operator
  (defun efs/insert_double_assign_operator ()
    "R - <<- operator"
    (interactive)
    (just-one-space 1)
    (insert "<<-")
    (just-one-space 1))

  (defun efs/ess-rmarkdown ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "library(rmarkdown); rmarkdown::render(\"%s\", \"all\")"
                        buffer-file-name)))
          (message "Running rmarkdown on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

  (defun efs/ess-bookdown ()
    "Compile with bookdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "bookdown::render_book(\"%s\")"
                        buffer-file-name)))
          (message "Running bookdown on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

  (defun efs/ess-xaringan ()
    "Compile with xaringan moon_reader (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "rmarkdown::render(\"%s\", \"xaringan::moon_reader\")"
                        buffer-file-name)))
          (message "Running xaringan::moon_reader on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

  (defun efs/ess-rshiny ()
    "Compile R markdown (.Rmd). Should work for any output type."
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "library(rmarkdown); rmarkdown::run(\"%s\")"
                        buffer-file-name)))
          (message "Running shiny on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

  (defun efs/ess-publish-rmd ()
    "Publish R Markdown (.Rmd) to remote server"
    (interactive)
    ;; Check if attached R-session
    (condition-case nil
        (ess-get-process)
      (error
       (ess-switch-process)))
    (let* ((rmd-buf (current-buffer)))
      (save-excursion
        ;; assignment
        (let* ((sprocess (ess-get-process ess-current-process-name))
               (sbuffer (process-buffer sprocess))
               (buf-coding (symbol-name buffer-file-coding-system))
               (R-cmd
                (format "workflow::wf_publish_rmd(\"%s\")"
                        buffer-file-name)))
          ;; execute
          (message "Publishing rmarkdown on %s" buffer-file-name)
          (ess-execute R-cmd 'buffer nil nil)
          (switch-to-buffer rmd-buf)
          (ess-show-buffer (buffer-name sbuffer) nil)))))

#+end_src

**** ESS config

#+begin_src emacs-lisp

  ;; set up ess
  (use-package ess
    ;; :defer t
    ;; :straight t
    :init
    (require 'ess-r-mode)
    ;;(require 'ess-view-data)
    ;; (require 'ess-site)
    ;; (require 'ess-rutils)
    ;; Auto set width and length options when initiate new Ess processes
    :config
    (add-hook 'ess-post-run-hook 'ess-execute-screen-options)
    (add-hook 'ess-mode-hook (lambda () (run-hooks 'prog-mode-hook)))
    (add-hook 'ess-mode-hook
              (lambda () (ess-set-style 'RRR 'quiet)
                (add-hook 'local-write-file-hooks
                          (lambda () (ess-nuke-trailing-whitespace)))))
    (add-hook 'inferior-ess-mode-hook 'ansi-color-for-comint-mode-on)
    (add-hook 'inferior-ess-mode-hook #'(lambda ()
                                          (setq-local comint-use-prompt-regexp nil)
                                          (setq-local inhibit-field-text-motion nil)))
    (add-hook 'ess-r-mode-hook
              (lambda()
                'eglot-ensure
                (make-local-variable 'company-backends)
                (delete-dups (push 'company-capf company-backends))
                (delete-dups (push 'company-files company-backends))))
    (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
    (show-paren-mode)
    ;;(setq ess-eval-empty t)               ; don't skip non-code line
    (setq comint-scroll-to-bottom-on-input 'this)
    (setq comint-move-point-for-output 'others)
    ;;(setq ess-ask-for-ess-directory nil)
    (setq ess-eval-visibly 'nowait)
    (setq ess-use-flymake nil)
    ;; (setq ess-r-flymake-linters '("infix_spaces_linter" . "commas_linter"))
    (setq ess-roxy-fold-examples nil)
    (setq ess-roxy-fontify-examples t)
    (setq ess-use-company 'script-only)
    (setq ess-company-arg-prefix-length 1)
    ;;(setq ess-blink-region nil)

    (setq ess-r-flymake-lintr-cache nil)
    (setq ess-history-directory "~/.R/")
    (setq inferior-R-args "--no-restore-history --no-save")
    (setq ess-offset-arguments 'prev-line)

    (setq ess-indent-with-fancy-comments nil)

    ;; fix assignment key
    (ess-toggle-underscore nil)
    (setq ess-insert-assign (car ess-assign-list))
    (setq ess-assign-list '(" = "))
    (bind-key "M--" 'ess-insert-assign)

    (setq ess-eldoc-show-on-symbol nil)
    ;; This may cause massive slow downs?
    (setq ess-eldoc-abbreviation-style nil)
    ;;(setq ess-use-eldoc nil)
    (setq comint-scroll-to-bottom-on-output t)
    :general
    (global-leader
      :major-modes
      '(ess-r-mode inferior-ess-r-mode t)
      :keymaps
      '(ess-r-mode-map inferior-ess-r-mode-map)
      "e" '(:ignore e :which-key "eval")
      "eb" '(ess-eval-buffer :which-key "buffer")
      "ed" '(eval-buffer-from-beg-to-here :which-key "buffer from beg")
      "ee" '(eval-buffer-from-here-to-end :which-key "buffer to end")
      "el" '(ess-eval-region-or-line-and-step :which-key "line or region")
      "ef" '(ess-eval-function-or-paragraph-and-step :which-key "function or paragraph")
      "er" '(polymode-eval-region-or-chunk :which-key "Rmd region or chunk")
      "r" '(:ignore r :which-key "Rmd")
      "rb" '(efs/ess-bookdown :which-key "bookdown-export")
      "rx" '(efs/ess-xaringan :which-key "xaringan-export")
      "re" '(efs/ess-rmarkdown :which-key "Rmd-export")
      "rs" '(efs/ess-rshiny :which-key "shiny-export")
      "rd" '(efs/ess-publish-rmd :which-key "publish Rmd")
      "rn" '(polymode-next-chunk :which-key "next chunk")
      "rp" '(polymode-previous-chunk :which-key "previous chunk")
      "rk" '(polymode-kill-chunk :which-key "kill chunk")
      "rl" '(markdown-insert-link :which-key "insert link")
      "ri" '(markdown-insert-image :which-key "insert image")
      "d" '(ess-doc-map :which-key "docs")
      ;;"c" '(ess-r-mode-map :which-key "ess r map") ; doesn't work - maybe command?
      "i" '(:ignore i :which-key "insert")
      "ii" '(efs/insert-r-in :which-key "%in%")
      "id" '(efs/insert_double_assign_operator :which-key "<<-")
      ";" '(ess-insert-assign :which-key "<-")
      "p" '(efs/insert-r-pipe :which-key "insert %>%")
      "v" '(ess-rdired :which-key "rdired")
      "w" '(ess-set-working-directory :which-key "set wd")))
  ;; :bind (:map ess-r-mode-map
  ;;             ("C-c C-w w" . ess-r-package-use-dir)
  ;;             ("C-c C-w C-w" . ess-r-package-use-dir)
  ;;             ("<C-M-return>" . ess-eval-region-or-function-or-paragraph-and-step)
  ;;             ("<C-S-return>" . ess-eval-buffer)
  ;;             ("C-M-;" . comment-line)
  ;;             ("C-S-<f10>" . inferior-ess-reload)
  ;;             ("<f5>" . ess-display-help-on-object)
  ;;             ("<C-return>" . ess-eval-region-or-function-or-paragraph))
  ;; :bind (:map inferior-ess-mode-map
  ;;             ("C-S-<f10>" . inferior-ess-reload)))

  ;; An example of window configuration:
  (setq display-buffer-alist
        '(("*R Dired"
           (display-buffer-reuse-window display-buffer-at-bottom)
           (window-width . 0.5)
           (window-height . 0.25)
           (reusable-frames . nil))
          ("*R"
           (display-buffer-reuse-window display-buffer-in-side-window)
           (side . right)
           (slot . -1)
           (window-width . 0.5)
           (reusable-frames . nil))
          ("*Help"
           (display-buffer-reuse-window display-buffer-in-side-window)
           (side . right)
           (slot . 1)
           (window-width . 0.5)
           (reusable-frames . nil))))
  ;; syntax highlight
  (setq ess-R-font-lock-keywords
        (quote
         ((ess-R-fl-keyword:modifiers . t)
          (ess-R-fl-keyword:fun-defs . t)
          (ess-R-fl-keyword:fun-defs2 . t)
          (ess-R-fl-keyword:keywords . t)
          (ess-R-fl-keyword:assign-ops)
          (ess-R-fl-keyword:constants . t)
          (ess-fl-keyword:fun-calls . t)
          (ess-fl-keyword:numbers . t)
          (ess-fl-keyword:operators)
          (ess-fl-keyword:delimiters)
          (ess-fl-keyword:=)
          (ess-fl-keyword::= . t)
          (ess-R-fl-keyword:F&T)
          (ess-R-fl-keyword:%op%))))

  (setq inferior-ess-r-font-lock-keywords
        (quote
         ((ess-S-fl-keyword:prompt . t)
          (ess-R-fl-keyword:messages . t)
          (ess-R-fl-keyword:modifiers . t)
          (ess-R-fl-keyword:fun-defs . t)
          (ess-R-fl-keyword:fun-defs2 . t)
          (ess-R-fl-keyword:keywords . t)
          (ess-R-fl-keyword:assign-ops)
          (ess-R-fl-keyword:constants . t)
          (ess-fl-keyword:matrix-labels)
          (ess-fl-keyword:fun-calls)
          (ess-fl-keyword:numbers)
          (ess-fl-keyword:operators)
          (ess-fl-keyword:delimiters)
          (ess-fl-keyword:=)
          (ess-fl-keyword::= . t)
          (ess-R-fl-keyword:F&T))))

          #+end_src

          block from [[https://github.com/japhir/ArchConfigs/blob/master/myinit.org#ess][here]]

#+begin_src emacs-lisp :tangle no

  (use-package ess
    ;; :load-path "/usr/share/emacs/site-lisp/ess"
    (require 'ess-r-mode)
    ;; :init (require 'ess-site)  ;; seems like this is needed to load the minor modes as well keybindings don't work without it
    ;; (require 'ess-rutils)
    :hook ((ess-r-mode inferior-ess-r-mode) . electric-layout-mode)  ;; commented out since new curly-curly operator for rlang
    :commands R
    :general
    (global-leader
      :major-modes
      '(ess-r-mode inferior-ess-r-mode t)
      :keymaps
      '(ess-r-mode-map inferior-ess-r-mode-map)
      "e" '(:ignore e :which-key "eval")
      "eb" '(ess-eval-buffer :which-key "buffer")
      "ed" '(eval-buffer-from-beg-to-here :which-key "buffer from beg")
      "ee" '(eval-buffer-from-here-to-end :which-key "buffer to end")
      "el" '(ess-eval-region-or-line-and-step :which-key "line or region")
      "ef" '(ess-eval-function-or-paragraph-and-step :which-key "function or paragraph")
      "ep" '(polymode-eval-region-or-chunk :which-key "Rmd region or chunk")
      "r" '(:ignore r :which-key "Rmd")
      "re" '(polymode-export :which-key "poly-export")
      "rn" '(polymode-next-chunk :which-key "next chunk")
      "rp" '(polymode-previous-chunk :which-key "previous chunk")
      "rk" '(polymode-kill-chunk :which-key "kill chunk")
      "rl" '(markdown-insert-link :which-key "insert link")
      "ri" '(markdown-insert-image :which-key "insert image")
      "d" '(ess-doc-map :which-key "docs")
      "i" '(:ignore i :which-key "insert")
      ";" '(ess-insert-assign :which-key "insert <-")
      "i" 'efs/insert-r-in
      "p" 'efs/insert-r-pipe)

    :config
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (or (string= lang "R")
               (string= lang "elisp")
               (string= lang "emacs-lisp")
               (string= lang "latex"))))
    (setq display-buffer-alist
          '(("*R Dired"
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . right)
             (slot . -1)
             (window-width . 0.33))
            ("*R"
             (display-buffer-reuse-window display-buffer-in-side-window)
             (slot . 2)
             (window-width . 0.5))
            ("*Help"
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . right)
             (slot . 1)
             (window-width . 0.33)))
          ;; ess-help-own-frame 'one
          ess-auto-width 'frame
          org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate
          ess-style 'RStudio
          ess-use-auto-complete nil
          ess-use-company t
          ess-indent-with-fancy-comments nil
          ess-pdf-viewer-pref 'emacsclient
          inferior-R-args "--no-restore-history --no-save"
          ess-ask-for-ess-directory nil
          ess-R-font-lock-keywords
          (quote
           ((ess-R-fl-keyword:modifiers)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-R-fl-keyword:fun-cals . t)
            (ess-R-fl-keyword:numbers)
            (ess-R-fl-keyword:operators . t)
            (ess-R-fl-keyword:delimiters)
            (ess-R-fl-keyword:=)
            (ess-R-fl-keyword:F&T)))))

#+end_src

**** electric-spacing operator
Put spaces around operators such as +, -, etc.

#+begin_src emacs-lisp
  (use-package electric-operator
    :hook ((R-mode ess-r-mode inferior-ess-r-mode). electric-operator-mode)
    ;; :config
    ;; (electric-operator-add-rules-for-mode 'ess-r-mode
    ;;                                       (cons "{{" "{{ ")
    ;;                                       (cons "}" " }"))
    :custom
    (electric-operator-R-named-argument-style 'spaced))
#+end_src

**** Flycheck and auto code formatting

#+begin_src emacs-lisp

  (use-package flycheck
    ;;:ensure t
    :init (global-flycheck-mode 1))

  (use-package format-all)

#+end_src

**** Markdown- and polymode
[[https://github.com/jrblevin/markdown-mode/tree/051734091aba17a54af96b81beebdbfc84c26459][Markdown mode]] for writting and polymode for .Rmd files

#+begin_src emacs-lisp

  (use-package markdown-mode
    :hook (markdown-mode . flyspell-mode)
    :general
    (global-leader
      :major-modes
      '(markdown-mode t)
      :keymaps
      '(markdown-mode-map)
      ;;"m" '(:ignore m :which-key "markdown")
      "l" '(markdown-insert-link :which-key "insert link")
      "i" '(markdown-insert-image :which-key "insert image")
      "c" '(markdown-insert-code :which-key "insert code")
      "f" '(markdown-insert-foldable-block :which-key "insert foldable block")
      "t" '(markdown-toggle-inline-images :which-key "toggle inline images")
      "e" '(efs/ess-rmarkdown :which-key "export .Rmd")
      "s" '(:ignore s :which-key "text styling")
      "sb" '(markdown-insert-bold :which-key "bold")
      "si" '(markdown-insert-italic :which-key "italic")
      "sq" '(markdown-insert-blockquote :which-key "quote")
      "ss" '(markdown-insert-strike-through :which-key "strike-through")))
  ;; to allow editing of code blocks we need edit-indirect
  (use-package edit-indirect)
  (use-package poly-markdown)
  (use-package poly-R)

  (use-package polymode
    :diminish (poly-org-mode
               poly-markdown-mode
               poly-noweb+r-mode
               poly-noweb+r-mode
               poly-markdown+r-mode
               poly-rapport-mode
               poly-html+r-mode
               poly-brew+r-mode
               poly-r+c++-mode
               poly-c++r-mode)
    :init
    (require 'poly-markdown)
    :config
    (add-to-list 'auto-mode-alist '("\\.md$" . poly-markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode))
    (add-to-list 'auto-mode-alist '("\\.rmd$" . poly-markdown+r-mode))
    (add-to-list 'auto-mode-alist '("\\.Rcpp$" . poly-r+c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cppR$" . poly-c++r-mode))
    )

#+end_src

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].
Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.
I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.
Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.
When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.
Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

*** Debugging with dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].
You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.
Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

#+begin_src emacs-lisp

  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.
Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no
  pip install --user "python-language-server[all]"
#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp

  (use-package python-mode
    ;;:ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.
The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

*** SQL

#+begin_src emacs-lisp

  (use-package sql
    :general
    (global-leader
      :major-modes
      '(sql-mode t)
      :keymaps
      '(lsp-mode-map)
      "e" '(:ignore e :which-key "eval")
      "eb" '(sql-send-buffer :which-key "send buffer")
      "ep" '(sql-send-paragraph :which-key "send paragraph")
      "el" '(sql-send-line-and-next :which-key "send line and next")
      "er" '(sql-send-region :which-key "send region")
      "l" '(sql-list-all :which-key "list all")
      "t" '(sql-list-table :which-key "list table")))

  ;; default login params
  (setq sql-postgres-login-params
        '((user :default "mateus")
          (database :default "postgres")
          (server :default "localhost")
          (port :default 5432)))

  ;; hooks
  (add-hook 'sql-interactive-mode-hook
            (lambda ()
              (toggle-truncate-lines t)))
  ;; (add-hook 'sql-interactive-mode-hook 'lsp-deferred)
  (add-hook 'sql-mode-hook 'lsp-mode)
  ;; (add-hook 'sql-mode-hook #'lsp-deferred)
  (setq lsp-sqls-workspace-config-path nil)

  ;; add sqls path
  (setq lsp-sqls-server (concat (getenv "HOME") "/go/bin/sqls"))

  (setq lsp-sqls-connections
        '(((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=mateus dbname=postgres sslmode=disable"))))


  ;; (setq lsp-sqls-connections
  ;;       '(((driver . "mysql") (dataSourceName . "yyoncho:local@tcp(localhost:3306)/foo"))
  ;;         ((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=yyoncho password=local dbname=sammy sslmode=disable"))))

  (setq sql-connection-alist
        '((pool-a
           (sql-product 'postgresql)
           (sql-server "1.2.3.4")
           (sql-user "mateus")
           (sql-database "postgres")
           (sql-port 5432))))

  ;; (setq sql-connection-alist
  ;;       '((pool-a
  ;;          (sql-product 'mysql)
  ;;          (sql-server "1.2.3.4")
  ;;          (sql-user "me")
  ;;          (sql-password "mypassword")
  ;;          (sql-database "thedb")
  ;; (sql-port 3306))))

  ;; prevent tripup from databases with underscores in their name - rom emacs wiki
  ;; (sql-set-product-feature 'postgres :prompt-regexp "^[-[:alnum:]_]*=[#>] ")
  ;; (sql-set-product-feature 'postgres :prompt-cont-regexp
  ;;                          "^[-[:alnum:]_]*[-(][#>] ")

  ;; package to make SQL keywords uppercase whilst typing
  (use-package sqlup-mode
    :config
    (add-hook 'sql-mode-hook 'sqlup-mode)
    (add-hook 'sql-interactive-mode-hook 'sqlup-mode)
    (add-hook 'redis-mode-hook 'sqlup-mode))
  ;; auto-indent
  (use-package sql-indent
    :config
    (add-hook 'sql-mode-hook 'sqlup-mode)
    (add-hook 'sql-interactive-mode-hook 'sqlup-mode)
    (add-hook 'redis-mode-hook 'sqlup-mode))

#+end_src

#+begin_src emacs-lisp :tangle no

  (sql-add-postgress-db
   your-db-name
   :port 5432
   :user "mateus"
   :host "localhost"
   :database "postgres"
   :password "test")

  ;;###autoload
  (defmacro any-nil? (&rest args)
    `(not (and ,@args)))

  ;;###autoload
  (defmacro throw-if (condition &optional error-description)
    "if condition is true, thrown an error"
    `(if ,condition (error (or ,error-description ""))))

  ;; Variables related to sql configs
  (setq lsp-sqls-connections nil)
  (setq sql-connection-alist nil)

  ;;;###autoload
  (defun format-postgres-sqls (host port user password db)
    (format "host=%s port=%s user=%s password=%s dbname=%s"
            host port user password db))

  ;;;###autoload
  (defun format-mysql-sqls (host port user password db)
    (format "%s:%s@tcp(%s:%s)/%s" user password host port db))

  ;;;###autoload
  (defun format-postgres-uri (host port user password db)
    (format "postgresql://%s:%s@%s:%s/%s" user password host port db))


  ;;;###autoload
  (defun add-to-sqls-connections (db-type data-src-name)
    (add-to-list 'lsp-sqls-connections
                 (list (cons 'driver db-type)
                       (cons 'dataSourceName data-src-name))))

  ;;;###autoload
  (defmacro add-to-sql-conection-alist (db-type name host port user password db)
    `(add-to-list 'sql-connection-alist
                  (list (quote ,name)
                        (list 'sql-product (quote ,db-type))
                        (list 'sql-user ,user)
                        (list 'sql-server ,host)
                        (list 'sql-port ,port)
                        (list 'sql-password ,password)
                        (list 'sql-database ,db))))

  ;;;###autoload
  (defmacro sql-add-postgres-db (name &rest db-info)
    "Adds a mysql database to emacs and lsp
     This macro expects a name to the database and a p-list of parameters
     :port, :user, :password, :database, :host
     The only optional is :port, its default value is 5432
     e.g.:
     (sql-add-postgres-db
          my-db-name ;; notice that there are no quotes here
          :port 1234
          :user \"username\"
          :host \"my-host\"
          :database \"my-db\"
          :password \"mypassword\")"
    `(let ((port (or ,(plist-get db-info :port) 5432))
           (user ,(plist-get db-info :user))
           (password ,(plist-get db-info :password))
           (host ,(plist-get db-info :host))
           (db ,(plist-get db-info :database)))
       (throw-if (any-nil? user password host db (quote ,name)) "there are info missing!")
       (let ((full-uri (format-postgres-uri host port user password db))
             (data-src-name (format-postgres-sqls host port user password db)))
         (add-to-sqls-connections "postgresql" data-src-name)
         (add-to-sql-conection-alist 'postgres ,name host port user password full-uri))))

  ;;;###autoload
  (defmacro sql-add-mysql-db (name &rest db-info)
    "Adds a mysql database to emacs and lsp
     This macro expects a name to the database and a p-list of parameters
     :port, :user, :password, :database, :host
     The only optional is :port, its default value is 3306
     e.g.:
     (sql-add-mysql-db
          my-db-name ;; notice that there are no quotes here
          :port 1234
          :user \"username\"
          :host \"my-host\"
          :database \"my-db\"
          :password \"mypassword\")"
    `(let ((port (or ,(plist-get db-info :port) 3306))
           (user ,(plist-get db-info :user))
           (password ,(plist-get db-info :password))
           (host ,(plist-get db-info :host))
           (db ,(plist-get db-info :database)))
       (throw-if (any-nil? user password host db (quote ,name)) "there are info missing!")
       (add-to-sqls-connections "mysql" (format-mysql-sqls host port user password db))
       (add-to-sql-conection-alist 'mysql ,name host port user password db)))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.
Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    ;; :bind-keymap
    ;; ("SPC p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/git_work")
      (setq projectile-project-search-path '("~/git_work")))
    (setq projectile-switch-project-action #'projectile-dired))

  (efs/leader-keys
   "p"   '(projectile-command-map :which-key "projectile"))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Version control

*** Diff highlight

Highlight diffs of current version-controlled buffer in the margin. Quite cool!

#+begin_src emacs-lisp

  (use-package diff-hl
    :init
    (global-diff-hl-mode)
    (setq diff-hl-gutter-mode t)
    (diff-hl-flydiff-mode +1)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh))

#+end_src

*** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.
Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

  ;; keybindings
  (efs/leader-keys
   "g"   '(:ignore t :which-key "git")
   "gg"  'magit-status
   "gd"  'magit-diff-unstaged
   "gc"  'magit-branch-or-checkout
   "gl"   '(:ignore t :which-key "log")
   "glc" 'magit-log-current
   "glf" 'magit-log-buffer-file
   "gb"  'magit-branch
   "gP"  'magit-push-current
   "gp"  'magit-pull-branch
   "gf"  'magit-fetch
   "gF"  'magit-fetch-all
   "gr"  'magit-rebase)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.
I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter)
  ;;:bind ("SPC-/" . evilnc-comment-or-uncomment-lines)
  (efs/leader-keys
    "/"  '(evilnc-comment-or-uncomment-lines :which-key "comment line"))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.
This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook ((prog-mode LaTeX-mode) . rainbow-delimiters-mode))

#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!
Some basic keybinds can be found [[file:../../Documents/org-roam/20210221112029-dired_basic.org][here]]

#+begin_src emacs-lisp

  (use-package dired
    ;:ensure nil
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
