#+TITLE:   An Academic's Opinionated DOOM Emacs Config
#+property: header-args :tangle config.el
#+property: header-args:shell :tangle "setup.sh"

* Rudimentary configuration
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Personal Information
It's useful to have some basic personal information
#+begin_src emacs-lisp
(setq user-full-name "Mateus"
      user-mail-address "Bernardo-HarringtonG@cardiff.ac.uk")
#+end_src

** Fonts
Settings related to fonts within Doom Emacs:

- 'doom-font' – standard monospace font that is used for most things in Emacs.
- 'doom-variable-pitch-font' – variable font which is useful in some Emacs plugins.
- 'doom-big-font' – used in doom-big-font-mode; useful for presentations.
- 'font-lock-comment-face' – for comments.
- 'font-lock-keyword-face' – for keywords with special significance like 'setq' in elisp.

  #+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 18)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 19)
      doom-big-font (font-spec :family "Fira Code" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
  #+end_src

Because we care about how things look let's add a check to make sure we're told
if the system doesn't have any of those fonts.

#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("JetBrainsMono.*" "Overpass" "Fira Code" "IBM Plex Mono"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
#+end_src

#+begin_src emacs-lisp :noweb no-export
<<detect-missing-fonts()>>
#+end_src

This way whenever fonts are missing, after Doom's UI has initialised, a warning
listing the missing fonts should appear for at least half a second.

#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'modus-vivendi)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

** Custom key-bindings

#+begin_src emacs-lisp
(map! :leader
      :desc "Swiper" "b f" #'swiper
      :desc "evil-comment" "b /" #'evilnc-comment-or-uncomment-lines)

;; another example:
;; (map! :leader
;;       (:prefix-map ("a" . "applications")
;;        (:prefix ("j" . "journal")
;;         :desc "New journal entry" "j" #'org-journal-new-entry
;;         :desc "Search journal entry" "s" #'org-journal-search)))
#+end_src

** Better defaults

*** Simple settings
Browsing the web and seeing [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#use-better-defaults][angrybacon/dotemacs]] and comparing with the values
shown by =SPC h v= and selecting what I thought looks good, I've ended up adding
the following:

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 4)                            ; It's nice to maintain a little margin

(display-time-mode 1)                             ; Enable time in the mode-line

(unless (string-match-p "^Power N/A" (battery))   ; On laptops...
  (display-battery-mode 1))                       ; it's nice to know how much power you have

(global-subword-mode 1)                           ; Iterate through CamelCase words
#+end_src

*** Which-key delay

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5) ;; I need the help, I really do
#+end_src


*** EVIL

From the :editor evil module.

When I want to make a substitution, I want it to be global more often than not — so let’s make that the default.

Now, EVIL cares a fair bit about keeping compatibility with Vim’s default behaviour.
I don’t.
There are some particular settings that I’d rather be something else, so let’s change them.

#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src


*** Windows

I find it rather handy to be asked which buffer I want to see after splitting the window. Let’s make that happen.

First, we’ll enter the new window

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Then, we’ll pull up a buffer prompt.

#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))

#+end_src

* Dired

Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                 | DESCRIPTION                                 | KEYBINDING |
|-------------------------+---------------------------------------------+------------|
| dired-view-file         | /View file in dired/                          | SPC d v    |
| dired-up-directory      | /Go up in directory tree/                     | h          |
| dired-find-file         | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line         | Move down to next line                      | j          |
| dired-previous-line     | Move up to previous line                    | k          |
| dired-mark              | Mark file at point                          | m          |
| dired-unmark            | Unmark file at point                        | u          |
| dired-do-copy           | Copy current file or marked files           | C          |
| dired-do-rename         | Rename current file or marked files         | R          |
| dired-hide-details      | Toggle detailed listings on/off             | (          |
| dired-git-info-mode     | Toggle git information on/off               | )          |
| dired-create-directory  | Create new empty directory                  | +          |
| dired-diff              | Compare file at point with another          | =          |
| dired-subtree-toggle    | Toggle viewing subtree at point             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC


* Org

#+begin_src emacs-lisp
(require 'org)
(require 'org-habit)
#+end_src

Set up the directories

#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq
 org_notes (concat (getenv "HOME") "/Documents/org-roam/")
 ;; zot_bib (concat (getenv "HOME") "/Documents/masterLib.bib")
 org-directory org_notes
 ;; org-roam-dailies-directory (concat org_notes "daily")
 deft-directory org_notes
 org-roam-directory org_notes
 org-roam-db-location (concat org_notes "org-roam.db"))

;; (setq mh/default-bibliography `(,(expand-file-name "masterLib.bib" org-directory)))
(setq mh/default-bibliography `("~/Documents/masterLib.bib"))
#+end_src

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.
There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp
(after! org
  (setq org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-item-bullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        ))

(setq org-agenda-files
      '("~/Documents/org/tasks.org"
        "~/Documents/org/habits.org"
        "~/Documents/org/birthdays.org"))

;; set default org-babel header-args
;; (setq org-babel-default-header-args
;;       (cons '(:exports . "both")
;;             (assq-delete-all :exports org-babel-default-header-args))
;;       org-babel-default-header-args
;;       (cons '(:results . "output verbatim replace")
;;             (assq-delete-all :results org-babel-default-header-args)))

(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-column 60)

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

(setq org-refile-targets
      '(("archive.org" :maxlevel . 1)
        ("tasks.org" :maxlevel . 1)))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)

(setq org-tag-alist
      '((:startgroup)
        ;; Put mutually exclusive tags here
        (:endgroup)
        ("@errand" . ?E)
        ("@home" . ?H)
        ("@work" . ?W)
        ("agenda" . ?a)
        ("planning" . ?p)
        ("publish" . ?P)
        ("batch" . ?b)
        ("note" . ?n)
        ("idea" . ?i)))

;; Configure custom agenda views
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7)))
          (todo "NEXT"
                ((org-agenda-overriding-header "Next Tasks")))
          (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

        ("n" "Next Tasks"
         ((todo "NEXT"
                ((org-agenda-overriding-header "Next Tasks")))))
        ;; filter to tag work, but not tag email
        ("W" "Work Tasks" tags-todo "+work-email")

        ;; Low-effort next actions
        ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
         ((org-agenda-overriding-header "Low Effort Tasks")
          (org-agenda-max-todos 20)
          (org-agenda-files org-agenda-files)))

        ("w" "Workflow Status"
         ((todo "WAIT"
                ((org-agenda-overriding-header "Waiting on External")
                 (org-agenda-files org-agenda-files)))
          (todo "REVIEW"
                ((org-agenda-overriding-header "In Review")
                 (org-agenda-files org-agenda-files)))
          (todo "PLAN"
                ((org-agenda-overriding-header "In Planning")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "BACKLOG"
                ((org-agenda-overriding-header "Project Backlog")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "READY"
                ((org-agenda-overriding-header "Ready for Work")
                 (org-agenda-files org-agenda-files)))
          (todo "ACTIVE"
                ((org-agenda-overriding-header "Active Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "COMPLETED"
                ((org-agenda-overriding-header "Completed Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "CANC"
                ((org-agenda-overriding-header "Cancelled Projects")
                 (org-agenda-files org-agenda-files)))))))

(setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Documents/org/tasks.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
        ("ts" "Clocked Entry Subtask" entry (clock)
         "* TODO %\n %U\n %a\n %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
         (file+olp+datetree "~/Documents/org/journal.org")
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
         :clock-in :clock-resume
         :empty-lines 1)
        ("jm" "Meeting" entry
         (file+olp+datetree "~/Documents/org/journal.org")
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Documents/org/journal.org")
         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("h" "Hugo")
        ("hp" "Blog Post" entry (file+olp "~/git_work/personal_website/org-content/blog.org" "Posts")
         (function  org-hugo-new-subtree-post-capture-template))

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Documents/org/metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

;; this is an example of how to bind staight to a capture template
;; (define-key global-map (kbd "C-c j")
;; (lambda () (interactive) (org-capture nil "jj")))

;; (efs/org-font-setup))

#+end_src

** Clocking/logging

#+begin_src emacs-lisp
(setq org-check-running-clock t
      org-log-note-clock-out t
      org-log-done 'time
      org-log-into-drawer t)
      ;; org-clock-auto-clockout-timer (* 10 60))
#+end_src


** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.
For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("r" . "src R")))
#+end_src


** Org-roam

#+begin_src emacs-lisp
(use-package! org-roam
  :init
  (map! :leader
        :prefix "n r"
        ;; :desc "org-roam" "l" #'org-roam-buffer-toggle
        ;; :desc "org-roam-node-insert" "i" #'org-roam-node-insert
        ;; :desc "org-roam-node-find" "f" #'org-roam-node-find
        ;; :desc "org-roam-ref-find" "r" #'org-roam-ref-find
        ;; :desc "org-roam-capture" "c" #'org-roam-capture
        :desc "org-roam-show-graph" "g" #'org-roam-ui-mode
        :desc "org-roam-citation" "c" #'mh/org-roam-node-from-cite
        :desc "jethro/org-capture-slipbox" "<tab>" #'jethro/org-capture-slipbox)
  (setq org-roam-db-gc-threshold most-positive-fixnum
        org-id-link-to-org-use-id t)
  :config
  (org-roam-db-autosync-mode +1)
  (set-popup-rules!
    `((,(regexp-quote org-roam-buffer) ; persistent org-roam buffer
       :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 1)
      ("^\\*org-roam: " ; node dedicated org-roam buffer
       :side right :width .33 :height .5 :ttl nil :modeline nil :quit nil :slot 2)))
  (add-hook 'org-roam-mode-hook #'turn-on-visual-line-mode)
  (setq org-roam-capture-templates
        '(("m" "main" plain
           "%?"
           :if-new (file+head "main/${slug}.org"
                              "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: Project")
           :unnarrowed t)
          ("r" "reference" plain "%?"
           :if-new
           (file+head "reference/${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("a" "article" plain "%?"
           :if-new
           (file+head "articles/${slug}.org" "#+title: ${title}\n#+filetags: :article:\n")
           :immediate-finish t
           :unnarrowed t)))

  (defun jethro/tag-new-node-as-draft ()
    (org-roam-tag-add '("draft")))

  (add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)
  (set-company-backend! 'org-mode '(company-capf))

  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))

  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

  (require 'citar)


  (defun mh/org-roam-node-from-cite (keys-entries)
    (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))
    (let ((title (citar--format-entry-no-widths (cdr keys-entries)
                                                "${title}")))
      (org-roam-capture- :templates
                         '(("r" "reference" plain "%?" :if-new
                            (file+head "reference/${citekey}.org"
                                       ":PROPERTIES:
:ROAM_REFS: [cite:@${citekey}]
:END:
,#+title: ${title}\n")
                            :immediate-finish t
                            :unnarrowed t))
                         :info (list :citekey (car keys-entries))
                         :node (org-roam-node-create :title title)
                         :props '(:finalize find-file)))))
#+end_src

** Org-roam-UI

#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Citations

#+begin_src emacs-lisp
(after! bibtex-completion
  (setq! bibtex-completion-notes-path org-roam-directory
         bibtex-completion-bibliography mh/default-bibliography
         org-cite-global-bibliography mh/default-bibliography
         bibtex-completion-pdf-field "file"))

(after! bibtex-completion
  (after! org-roam
    (setq! bibtex-completion-notes-path org-roam-directory)))

(after! citar
  (map! :map org-mode-map
        :desc "Insert citation" "C-c b" #'citar-insert-citation)
  (setq citar-bibliography mh/default-bibliography
        citar-at-point-function 'embark-act
        citar-symbol-separator "  "
        citar-format-reference-function 'citar-citeproc-format-reference
        org-cite-csl-styles-dir "~/Zotero/styles"
        citar-citeproc-csl-styles-dir org-cite-csl-styles-dir
        citar-citeproc-csl-locales-dir "~/Zotero/locales"
        citar-citeproc-csl-style (org-file-name-concat org-cite-csl-styles-dir "apa.csl")))

#+end_src

*** Key-bindings

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("C" . "citations")
       :desc "Citar refresh" "r" #'citar-refresh
       :desc "Insert citation" "i" #'citar-insert-citation
       :desc "Open notes" "n" #'citar-open-notes
       :desc "Export bib" "e" #'citar-export-local-bib-file
       :desc "Select csl style" "s" #'citar-citeproc-select-csl-style
       (:prefix ("j" . "journal")
        :desc "New journal entry" "j" #'org-journal-new-entry
        :desc "Search journal entry" "s" #'org-journal-search)))
#+end_src

* Yasnippet

Good video guide to using [[https://github.com/joaotavora/yasnippet][yasnippet]] can be found [[https://www.youtube.com/watch?v=xmBovJvQ3KU][here]].
Note that yasnippet doesn't include any snippets to start with, but there are several collection on MELPA.
Here we start with [[http://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]].
The docs can be found [[https://joaotavora.github.io/yasnippet/][here]].

#+begin_src emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  ;;:diminish yas-mode
  :config
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  ;; (setq yas-snippet-dirs
  ;;       '("~/.config/doom/snippets"                 ;; personal snippets
  ;;         ;; "/path/to/some/collection/"           ;; foo-mode and bar-mode snippet collection
  ;;         ;; "/path/to/yasnippet/yasmate/snippets" ;; the yasmate collection
  ;;         ))
  ;;(setq yas-snippet-dirs-custom (format "%s/%s" user-emacs-directory "snippets/"))
  ;; (setq yas-snippet-dirs-custom (expand-file-name "/snippets" user-emacs-directory))
  ;; (add-to-list' yas-snippet-dirs 'yas-snippet-dirs-custom)
  (setq yas-indent-line t)
  ;; install some snippets
  ;; (use-package yasnippet-snippets)
  (yas-reload-all))

;; ivy support
;; (use-package ivy-yasnippet)
;; this doesn't seem to work - yasnippets in general not working well in R
(use-package r-autoyas
  :hook (ess-mode-hook . r-autoyas-ess-active))
;; (require 'r-autoyas)
;; (add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
#+end_src

* REGISTERS

Emacs registers are compartments where you can save text, rectangles and positions for later use.
Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.
The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("r" . "registers")
       :desc "Copy to register" "c" #'copy-to-register
       :desc "Frameset to register" "f" #'frameset-to-register
       :desc "Insert contents of register" "i" #'insert-register
       :desc "Jump to register" "j" #'jump-to-register
       :desc "List registers" "l" #'list-registers
       :desc "Number to register" "n" #'number-to-register
       :desc "Interactively choose a register" "r" #'counsel-register
       :desc "View a register" "v" #'view-register
       :desc "Window configuration to register" "w" #'window-configuration-to-register
       :desc "Increment register" "+" #'increment-register
       :desc "Point to register" "SPC" #'point-to-register))
#+END_SRC

* Projectile

#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/git_work/"))
#+end_src

* Development
** Languages
*** ESS for R

We use [[https://ess.r-project.org][ESS]] to enable R support in emacs
Current ess setting stolen from [[https://github.com/chuvanan/dot-files/blob/master/emacs-init.el][here]].

**** R functions

Define some functions for inserting various operators and exporting .Rmd

#+begin_src emacs-lisp
(defun efs/insert-r-pipe ()
  "Insert the pipe operator in R, %>%"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))

(defun efs/insert-r-in ()
  "Insert the pipe operator in R, %>%"
  (interactive)
  (just-one-space 1)
  (insert "%in%")
  (reindent-then-newline-and-indent))
;; <<- operator
(defun efs/insert_double_assign_operator ()
  "R - <<- operator"
  (interactive)
  (just-one-space 1)
  (insert "<<-")
  (just-one-space 1))

(defun efs/ess-rmarkdown ()
  "Compile R markdown (.Rmd). Should work for any output type."
  (interactive)
  ;; Check if attached R-session
  (condition-case nil
      (ess-get-process)
    (error
     (ess-switch-process)))
  (let* ((rmd-buf (current-buffer)))
    (save-excursion
      (let* ((sprocess (ess-get-process ess-current-process-name))
             (sbuffer (process-buffer sprocess))
             (buf-coding (symbol-name buffer-file-coding-system))
             (R-cmd
              (format "library(rmarkdown); rmarkdown::render(\"%s\", \"all\")"
                      buffer-file-name)))
        (message "Running rmarkdown on %s" buffer-file-name)
        (ess-execute R-cmd 'buffer nil nil)
        (switch-to-buffer rmd-buf)
        (ess-show-buffer (buffer-name sbuffer) nil)))))

(defun efs/ess-bookdown ()
  "Compile with bookdown (.Rmd). Should work for any output type."
  (interactive)
  ;; Check if attached R-session
  (condition-case nil
      (ess-get-process)
    (error
     (ess-switch-process)))
  (let* ((rmd-buf (current-buffer)))
    (save-excursion
      (let* ((sprocess (ess-get-process ess-current-process-name))
             (sbuffer (process-buffer sprocess))
             (buf-coding (symbol-name buffer-file-coding-system))
             (R-cmd
              (format "bookdown::render_book(\"%s\")"
                      buffer-file-name)))
        (message "Running bookdown on %s" buffer-file-name)
        (ess-execute R-cmd 'buffer nil nil)
        (switch-to-buffer rmd-buf)
        (ess-show-buffer (buffer-name sbuffer) nil)))))

(defun efs/ess-xaringan ()
  "Compile with xaringan moon_reader (.Rmd). Should work for any output type."
  (interactive)
  ;; Check if attached R-session
  (condition-case nil
      (ess-get-process)
    (error
     (ess-switch-process)))
  (let* ((rmd-buf (current-buffer)))
    (save-excursion
      (let* ((sprocess (ess-get-process ess-current-process-name))
             (sbuffer (process-buffer sprocess))
             (buf-coding (symbol-name buffer-file-coding-system))
             (R-cmd
              (format "rmarkdown::render(\"%s\", \"xaringan::moon_reader\")"
                      buffer-file-name)))
        (message "Running xaringan::moon_reader on %s" buffer-file-name)
        (ess-execute R-cmd 'buffer nil nil)
        (switch-to-buffer rmd-buf)
        (ess-show-buffer (buffer-name sbuffer) nil)))))

(defun efs/ess-rshiny ()
  "Compile R markdown (.Rmd). Should work for any output type."
  (interactive)
  ;; Check if attached R-session
  (condition-case nil
      (ess-get-process)
    (error
     (ess-switch-process)))
  (let* ((rmd-buf (current-buffer)))
    (save-excursion
      (let* ((sprocess (ess-get-process ess-current-process-name))
             (sbuffer (process-buffer sprocess))
             (buf-coding (symbol-name buffer-file-coding-system))
             (R-cmd
              (format "library(rmarkdown); rmarkdown::run(\"%s\")"
                      buffer-file-name)))
        (message "Running shiny on %s" buffer-file-name)
        (ess-execute R-cmd 'buffer nil nil)
        (switch-to-buffer rmd-buf)
        (ess-show-buffer (buffer-name sbuffer) nil)))))

(defun efs/ess-publish-rmd ()
  "Publish R Markdown (.Rmd) to remote server"
  (interactive)
  ;; Check if attached R-session
  (condition-case nil
      (ess-get-process)
    (error
     (ess-switch-process)))
  (let* ((rmd-buf (current-buffer)))
    (save-excursion
      ;; assignment
      (let* ((sprocess (ess-get-process ess-current-process-name))
             (sbuffer (process-buffer sprocess))
             (buf-coding (symbol-name buffer-file-coding-system))
             (R-cmd
              (format "workflow::wf_publish_rmd(\"%s\")"
                      buffer-file-name)))
        ;; execute
        (message "Publishing rmarkdown on %s" buffer-file-name)
        (ess-execute R-cmd 'buffer nil nil)
        (switch-to-buffer rmd-buf)
        (ess-show-buffer (buffer-name sbuffer) nil)))))
#+end_src

**** ESS config

#+begin_src emacs-lisp
(after! ess
  (add-hook! 'prog-mode-hook #'rainbow-delimiters-mode)

  ;; combines https://github.com/fernandomayer/spacemacs/blob/master/private/ess/packages.el and
  ;; https://github.com/MilesMcBain/spacemacs_cfg/blob/master/private/ess/packages.el.

  ;; If I use LSP it is better to let LSP handle lintr. See example in
  ;; https://github.com/hlissner/doom-emacs/issues/2606.
  (setq! ess-use-flymake nil)
  (setq! lsp-ui-doc-enable nil
         lsp-ui-doc-delay 1.5)

  ;; Code indentation copied from my old config.
  ;; Follow Hadley Wickham's R style guide
  (setq
   ess-style 'RStudio
   ess-offset-continued 2
   ess-expression-offset 0)

  (setq comint-move-point-for-output t)

  ;; From https://emacs.readthedocs.io/en/latest/ess__emacs_speaks_statistics.html
  ;; TODO: find out a way to make settings generic so that I can also set ess-inf-R-font-lock-keywords
  (setq ess-R-font-lock-keywords
        '((ess-R-fl-keyword:modifiers  . t)
          (ess-R-fl-keyword:fun-defs   . t)
          (ess-R-fl-keyword:keywords   . t)
          (ess-R-fl-keyword:assign-ops . t)
          (ess-R-fl-keyword:constants  . t)
          (ess-fl-keyword:fun-calls    . t)
          (ess-fl-keyword:numbers      . t)
          (ess-fl-keyword:operators    . t)
          (ess-fl-keyword:delimiters) ; don't because of rainbow delimiters
          (ess-fl-keyword:=            . t)
          (ess-R-fl-keyword:F&T        . t)
          (ess-R-fl-keyword:%op%       . t)))
  )

  ;; ESS buffers should not be cleaned up automatically
  ;; (add-hook 'inferior-ess-mode-hook #'doom-mark-buffer-as-real-h)

  ;; Open ESS R window to the left iso bottom.
  ;; (set-popup-rule! "^\\*R.*\\*$" :side 'left :size 0.38 :select nil :ttl nil :quit nil :modeline t))

#+end_src

#+begin_src emacs-lisp
  ;; Activate polymode when loading Rmarkdown documents. Also see
  ;; https://github.com/MilesMcBain/spacemacs_cfg/blob/master/private/polymode/packages.el
  ;; for somewhat outdated hints about a personal Rmd-mode
  (use-package! polymode
    :commands (R))

  (after! markdown-mode
    ;; Disable trailing whitespace stripping for Markdown mode
    (add-hook 'markdown-mode-hook #'doom-disable-delete-trailing-whitespace-h)
    ;; Doom adds extra line spacing in markdown documents
    (add-hook! 'markdown-mode-hook :append (setq line-spacing nil)))

  ;; From Tecosaur's configuration
  (add-hook! (gfm-mode markdown-mode) #'mixed-pitch-mode)
  ;; (add-hook! (gfm-mode markdown-mode) #'visual-line-mode #'turn-off-auto-fill)
  ;; ----------------------------------------------------------------------------


  ;; ----------------------------------------------------------------------------
  ;; Material on completing/completion mostly from
  ;; https://github.com/tecosaur/emacs-config/blob/master/config.org
  ;;
  ;; company-show-numbers works with Alt-x.
  ;; (after! company
  ;;   (setq company-show-numbers t))
  (set-company-backend! '(text-mode
                          markdown-mode
                          gfm-mode)
    '(:seperate company-ispell
      company-files
      company-yasnippet))
  ;; by default the following also has R-library in there, so this is not needed.
  ;; (set-company-backend! 'ess-r-mode '(company-R-args company-R-objects company-dabbrev-code :separate))
  (setq-default history-length 1000)
  (setq-default prescient-history-length 1000)
#+end_src

** ESS Keybindings

#+begin_src emacs-lisp
;; (after! ess
;;  (map! :localleader
;;  ;; (:map ess-r-mode-map
;;   (:prefix ("e" . "Rmd export")
;;         :desc "next chunk" "n" #'polymode-next-chunk)))

(map! :leader
      (:prefix-map ("e" . "Extras")
       (:prefix ("r" . "Rmd")
        :desc "next chunk" "n" #'polymode-next-chunk
        :desc "previous chunk" "p" #'polymode-previous-chunk
        :desc "kill chunk" "k" #'polymode-kill-chunk
       (:prefix ("e" . "eval")
        :desc "eval region or chunk" "e" #'polymode-eval-region-or-chunk
        :desc "eval buffer to point" "b" #'polymode-eval-buffer-from-beg-to-point
        :desc "eval point to end" "E" #'polymode-eval-buffer-from-point-to-end)
       (:prefix ("E" . "export")
        :desc "Export Rmd" "e" #'efs/ess-rmarkdown
        :desc "xaringan-export" "x" #'efs/ess-xaringan
        :desc "rshiny-export" "s" #'efs/ess-rshiny
        :desc "publish-rmd" "p" #'efs/ess-publish
        :desc "bookdown-export" "b" #'efs/ess-bookdown))))

;; "rl" '(markdown-insert-link :which-key "insert link")
;; "ri" '(markdown-insert-image :which-key "insert image")
#+end_src

Old config:

#+begin_src emacs-lisp :tangle no
;; set up ess
(use-package ess
  ;; :defer t
  ;; :straight t
  :init
  (require 'ess-r-mode)
  ;;(require 'ess-view-data)
  ;; (require 'ess-site)
  ;; (require 'ess-rutils)
  ;; Auto set width and length options when initiate new Ess processes
  :config
  (add-hook 'ess-post-run-hook 'ess-execute-screen-options)
  (add-hook 'ess-mode-hook (lambda () (run-hooks 'prog-mode-hook)))
  (add-hook 'ess-mode-hook ;; truncate lines to make tables easier to view
            (lambda () (toggle-truncate-lines t)))
  (add-hook 'ess-mode-hook
            (lambda () (ess-set-style 'RRR 'quiet)
              (add-hook 'local-write-file-hooks
                        (lambda () (ess-nuke-trailing-whitespace)))))
  (add-hook 'inferior-ess-mode-hook 'ansi-color-for-comint-mode-on)
  (add-hook 'inferior-ess-mode-hook #'(lambda ()
                                        (setq-local comint-use-prompt-regexp nil)
                                        (setq-local inhibit-field-text-motion nil)))
  (add-hook 'ess-r-mode-hook
            (lambda()
              'eglot-ensure
              (make-local-variable 'company-backends)
              (delete-dups (push 'company-capf company-backends))
              (delete-dups (push 'company-files company-backends))))
  (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
  (show-paren-mode)
  ;;(setq ess-eval-empty t)               ; don't skip non-code line
  (setq comint-scroll-to-bottom-on-input 'this)
  (setq comint-move-point-for-output 'others)
  ;;(setq ess-ask-for-ess-directory nil)
  (setq ess-eval-visibly 'nowait)
  (setq ess-use-flymake nil)
  ;; (setq ess-r-flymake-linters '("infix_spaces_linter" . "commas_linter"))
  (setq ess-roxy-fold-examples nil)
  (setq ess-roxy-fontify-examples t)
  (setq ess-use-company 'script-only)
  (setq ess-company-arg-prefix-length 1)
  ;;(setq ess-blink-region nil)

  (setq ess-r-flymake-lintr-cache nil)
  (setq ess-history-directory "~/.R/")
  (setq inferior-R-args "--no-restore-history --no-save")
  (setq ess-offset-arguments 'prev-line)

  (setq ess-indent-with-fancy-comments nil)

  ;; fix assignment key
  (ess-toggle-underscore nil)
  (setq ess-insert-assign (car ess-assign-list))
  (setq ess-assign-list '(" = "))
  (bind-key "M--" 'ess-insert-assign)

  (setq ess-eldoc-show-on-symbol nil)
  ;; This may cause massive slow downs?
  (setq ess-eldoc-abbreviation-style nil)
  ;;(setq ess-use-eldoc nil)
  (setq comint-scroll-to-bottom-on-output t)
  :general
  (global-leader
   :major-modes
   '(ess-r-mode inferior-ess-r-mode t)
   :keymaps
   '(ess-r-mode-map inferior-ess-r-mode-map)
   "e" '(:ignore e :which-key "eval")
   "eb" '(ess-eval-buffer :which-key "buffer")
   "ed" '(eval-buffer-from-beg-to-here :which-key "buffer from beg")
   "ee" '(eval-buffer-from-here-to-end :which-key "buffer to end")
   "el" '(ess-eval-region-or-line-and-step :which-key "line or region")
   "ef" '(ess-eval-function-or-paragraph-and-step :which-key "function or paragraph")
   "er" '(polymode-eval-region-or-chunk :which-key "Rmd region or chunk")
   "eB" '(polymode-eval-buffer-from-beg-to-point :which-key "Rmd chunks from beg to point")
   "eE" '(polymode-eval-buffer-from-point-to-end :which-key "Rmd chunks from point to end")
   "r" '(:ignore r :which-key "Rmd")
   "rb" '(efs/ess-bookdown :which-key "bookdown-export")
   "rx" '(efs/ess-xaringan :which-key "xaringan-export")
   "re" '(efs/ess-rmarkdown :which-key "Rmd-export")
   "rs" '(efs/ess-rshiny :which-key "shiny-export")
   "rd" '(efs/ess-publish-rmd :which-key "publish Rmd")
   "rn" '(polymode-next-chunk :which-key "next chunk")
   "rp" '(polymode-previous-chunk :which-key "previous chunk")
   "rk" '(polymode-kill-chunk :which-key "kill chunk")
   "rl" '(markdown-insert-link :which-key "insert link")
   "ri" '(markdown-insert-image :which-key "insert image")
   "d" '(ess-doc-map :which-key "docs")
   ;;"c" '(ess-r-mode-map :which-key "ess r map") ; doesn't work - maybe command?
   "i" '(:ignore i :which-key "insert")
   "ii" '(efs/insert-r-in :which-key "%in%")
   "id" '(efs/insert_double_assign_operator :which-key "<<-")
   ";" '(ess-insert-assign :which-key "<-")
   "p" '(efs/insert-r-pipe :which-key "insert %>%")
   "v" '(ess-rdired :which-key "rdired")
   "w" '(ess-set-working-directory :which-key "set wd")))
;; :bind (:map ess-r-mode-map
;;             ("C-c C-w w" . ess-r-package-use-dir)
;;             ("C-c C-w C-w" . ess-r-package-use-dir)
;;             ("<C-M-return>" . ess-eval-region-or-function-or-paragraph-and-step)
;;             ("<C-S-return>" . ess-eval-buffer)
;;             ("C-M-;" . comment-line)
;;             ("C-S-<f10>" . inferior-ess-reload)
;;             ("<f5>" . ess-display-help-on-object)
;;             ("<C-return>" . ess-eval-region-or-function-or-paragraph))
;; :bind (:map inferior-ess-mode-map
;;             ("C-S-<f10>" . inferior-ess-reload)))

;; An example of window configuration:
(setq display-buffer-alist
      '(("*R Dired"
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.5)
         (window-height . 0.25)
         (reusable-frames . nil))
        ("*R"
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.5)
         (reusable-frames . nil))
        ("*Help"
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.5)
         (reusable-frames . nil))))
;; syntax highlight
(setq ess-R-font-lock-keywords
      (quote
       ((ess-R-fl-keyword:modifiers . t)
        (ess-R-fl-keyword:fun-defs . t)
        (ess-R-fl-keyword:fun-defs2 . t)
        (ess-R-fl-keyword:keywords . t)
        (ess-R-fl-keyword:assign-ops)
        (ess-R-fl-keyword:constants . t)
        (ess-fl-keyword:fun-calls . t)
        (ess-fl-keyword:numbers . t)
        (ess-fl-keyword:operators)
        (ess-fl-keyword:delimiters)
        (ess-fl-keyword:=)
        (ess-fl-keyword::= . t)
        (ess-R-fl-keyword:F&T)
        (ess-R-fl-keyword:%op%))))

(setq inferior-ess-r-font-lock-keywords
      (quote
       ((ess-S-fl-keyword:prompt . t)
        (ess-R-fl-keyword:messages . t)
        (ess-R-fl-keyword:modifiers . t)
        (ess-R-fl-keyword:fun-defs . t)
        (ess-R-fl-keyword:fun-defs2 . t)
        (ess-R-fl-keyword:keywords . t)
        (ess-R-fl-keyword:assign-ops)
        (ess-R-fl-keyword:constants . t)
        (ess-fl-keyword:matrix-labels)
        (ess-fl-keyword:fun-calls)
        (ess-fl-keyword:numbers)
        (ess-fl-keyword:operators)
        (ess-fl-keyword:delimiters)
        (ess-fl-keyword:=)
        (ess-fl-keyword::= . t)
        (ess-R-fl-keyword:F&T))))

#+end_src
#+begin_src emacs-lisp :tangle no
(with-eval-after-load "ess"
  (require 'ess-site)
  (require 'ess-mode)
  ;;   (define-key evil-normal-state-map (kbd "<SPC-e>") 'ess-execute))

  ;; Set ESS options
  (setq
   ess-auto-width 'window
   ess-use-auto-complete nil
   ess-use-company 't
   ;; ess-r-package-auto-set-evaluation-env nil
   inferior-ess-same-window 't
   ess-indent-with-fancy-comments nil ; don't indent comments
   ess-eval-visibly t                 ; enable echoing input
   ;; ess-eval-visibly 'nowait   ;; Stop R repl eval from blocking emacs.
   ess-eval-empty t                   ; don't skip non-code lines.
   ess-ask-for-ess-directory nil) ; start R in the working directory by default

  (after! ess
    ;; (require 'ess-site)
    ;; (require 'ess-mode)
    ;; (require 'ess-r-mode)
    (setq ;ess-ask-for-ess-directory nil        ; start R in the working directory by default
     ;; ess-use-flymake nil    ; let lsp manage lintr?
     ess-ask-for-ess-directory t
     ess-local-process-name "R"
     ansi-color-for-comint-mode 'filter
     comint-scroll-to-bottom-on-input t
     comint-scroll-to-bottom-on-output t
     comint-move-point-for-output t
     )
    (set-company-backend! 'ess-r-mode
      '(
        ;;company-capf ;;not sure if needed or autoloaded
        ;;company-yasnippet
        company-R-args
        company-R-objects
        company-ess
        company-dabbrev-code
        company-files
        :separate))


    ;; Code indentation copied from my old config.
    ;; Follow Hadley Wickham's R style guide
    (setq
     ess-style 'RStudio
     ess-offset-continued 2
     ess-expression-offset 0)
#+end_src
Combine R and markdown mode in one buffer with polymode

#+begin_src emacs-lisp
(use-package polymode)
(use-package poly-R)
(use-package poly-markdown
  :config
  (add-to-list 'auto-mode-alist '("\\.rmd" . poly-markdown+R-mode))
  )
(with-eval-after-load "markdown"
  (use-package poly-markdown))
;; (with-eval-after-load "org"
;;   (use-package poly-org))
#+end_src

* Spelling
** Hunspell
#+begin_src shell :tangle (if (file-exists-p "/usr/share/myspell/en-custom.dic") "no" "setup.sh")
cd /tmp
curl -o "hunspell-en-custom.zip" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=hunspell'
unzip "hunspell-en-custom.zip"

sudo chown root:root en-custom.*
sudo mv en-custom.{aff,dic} /usr/share/myspell/
#+end_src

** Aspell
#+begin_src shell :tangle (if (file-expand-wildcards "/usr/lib64/aspell*/en-custom.multi") "no" "setup.sh")
cd /tmp
curl -o "aspell6-en-custom.tar.bz2" 'http://app.aspell.net/create?max_size=80&spelling=GBs&spelling=AU&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=aspell'
tar -xjf "aspell6-en-custom.tar.bz2"

cd aspell6-en-custom
./configure && make && sudo make install
#+end_src

*** Configuration
#+begin_src emacs-lisp
(setq ispell-dictionary "en-custom")
#+end_src
Oh, and by the way, if ~company-ispell-dictionary~ is ~nil~, then
~ispell-complete-word-dict~ is used instead, which once again when ~nil~ is
~ispell-alternate-dictionary~, which at the moment maps to a plaintext version of
the above.

It seems reasonable to want to keep an eye on my personal dict, let's have it
nearby (also means that if I change the 'main' dictionary I keep my addition).
#+begin_src emacs-lisp
(setq ispell-personal-dictionary (expand-file-name ".ispell_personal" doom-private-dir))
#+end_src

Regions to be ignored by ispell. For .Rmd files
https://superuser.com/questions/345084/how-to-exclude-in-flyspell-mode-and-flyspell-buffer
https://emacs.stackexchange.com/questions/44132/mmm-mode-and-flyspell
https://emacs.stackexchange.com/questions/36011/make-flyspell-avoid-checking-includes-in-c
https://stackoverflow.com/questions/4671908/how-to-make-flyspell-bypass-some-words-by-context
https://stackoverflow.com/questions/8287330/exempt-code-chunks-in-an-sweave-document-from-emacs-spell-check
https://stackoverflow.com/questions/28942860/emacs-flyspell-disable-for-custom-latex-macros

#+begin_src emacs-lisp :tangle no
(after! ispell
  (pushnew! ispell-skip-region-alist
            '("^```" . "```$")
            '("^`" . "`$")
            '("^[" . "]$")
            '("^{" . "}$"))
  )
#+end_src

** Grammar

I don't like the highlighting the grammar module applies

#+begin_src emacs-lisp
(setq writegood-mode nil)
#+end_src
